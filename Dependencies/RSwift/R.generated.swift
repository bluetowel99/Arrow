//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(identifier: "com.cerberusapplications.Arrow") ?? Bundle.main
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 1 color palettes.
  struct color {
    /// This `R.color.arrowColors` struct is generated, and contains static references to 22 colors.
    struct arrowColors {
      /// <span style='background-color: #000000; color: #FFFFFF; padding: 1px 3px;'>#000000</span> Plain Black
      static let plainBlack = Rswift.ColorResource(name: "Plain Black", red: 0.0, green: 0.0, blue: 0.0, alpha: 1.0)
      /// <span style='background-color: #053866; color: #FAC799; padding: 1px 3px;'>#053866</span> Marine Blue
      static let marineBlue = Rswift.ColorResource(name: "Marine Blue", red: 0.01960784314, green: 0.2196078431, blue: 0.4, alpha: 1.0)
      /// <span style='background-color: #0A6FCC; color: #F59033; padding: 1px 3px;'>#0A6FCC</span> Ocean Blue
      static let oceanBlue = Rswift.ColorResource(name: "Ocean Blue", red: 0.03921568627, green: 0.4352941176, blue: 0.8, alpha: 1.0)
      /// <span style='background-color: #0D8BFF; color: #F27400; padding: 1px 3px;'>#0D8BFF</span> Water Blue
      static let waterBlue = Rswift.ColorResource(name: "Water Blue", red: 0.05098039216, green: 0.5450980392, blue: 1.0, alpha: 1.0)
      /// <span style='background-color: #212121; color: #DEDEDE; padding: 1px 3px;'>#212121</span> Deep Gray
      static let deepGray = Rswift.ColorResource(name: "Deep Gray", red: 0.1294117647, green: 0.1294117647, blue: 0.1294117647, alpha: 1.0)
      /// <span style='background-color: #231F20; color: #DCE0DF; padding: 1px 3px;'>#231F20</span> Onyx Gray
      static let onyxGray = Rswift.ColorResource(name: "Onyx Gray", red: 0.137254902, green: 0.1215686275, blue: 0.1254901961, alpha: 1.0)
      /// <span style='background-color: #4A4A4A; color: #B5B5B5; padding: 1px 3px;'>#4A4A4A</span> Iron Gray
      static let ironGray = Rswift.ColorResource(name: "Iron Gray", red: 0.2901960784, green: 0.2901960784, blue: 0.2901960784, alpha: 1.0)
      /// <span style='background-color: #58595B; color: #A7A6A4; padding: 1px 3px;'>#58595B</span> Slate Gray
      static let slateGray = Rswift.ColorResource(name: "Slate Gray", red: 0.3450980392, green: 0.3490196078, blue: 0.3568627451, alpha: 1.0)
      /// <span style='background-color: #646464; color: #9B9B9B; padding: 1px 3px;'>#646464</span> Search Gray
      static let searchGray = Rswift.ColorResource(name: "Search Gray", red: 0.3921568627, green: 0.3921568627, blue: 0.3921568627, alpha: 1.0)
      /// <span style='background-color: #65B47C; color: #9A4B83; padding: 1px 3px;'>#65B47C</span> Grass Green
      static let grassGreen = Rswift.ColorResource(name: "Grass Green", red: 0.3960784314, green: 0.7058823529, blue: 0.4862745098, alpha: 1.0)
      /// <span style='background-color: #838383; color: #7C7C7C; padding: 1px 3px;'>#838383</span> Warm Gray
      static let warmGray = Rswift.ColorResource(name: "Warm Gray", red: 0.5137254902, green: 0.5137254902, blue: 0.5137254902, alpha: 1.0)
      /// <span style='background-color: #929497; color: #6D6B68; padding: 1px 3px;'>#929497</span> Hathi Gray
      static let hathiGray = Rswift.ColorResource(name: "Hathi Gray", red: 0.5725490196, green: 0.5803921569, blue: 0.5921568627, alpha: 1.0)
      /// <span style='background-color: #9B9B9B; color: #646464; padding: 1px 3px;'>#9B9B9B</span> Storm Gray
      static let stormGray = Rswift.ColorResource(name: "Storm Gray", red: 0.6078431373, green: 0.6078431373, blue: 0.6078431373, alpha: 1.0)
      /// <span style='background-color: #A980FF; color: #567F00; padding: 1px 3px;'>#A980FF</span> Indigo
      static let indigo = Rswift.ColorResource(name: "Indigo", red: 0.662745098, green: 0.5019607843, blue: 1.0, alpha: 1.0)
      /// <span style='background-color: #D0021B; color: #2FFDE4; padding: 1px 3px;'>#D0021B</span> Scarlet Red
      static let scarletRed = Rswift.ColorResource(name: "Scarlet Red", red: 0.8156862745, green: 0.007843137255, blue: 0.1058823529, alpha: 1.0)
      /// <span style='background-color: #D0D2D3; color: #2F2D2C; padding: 1px 3px;'>#D0D2D3</span> Silver
      static let silver = Rswift.ColorResource(name: "Silver", red: 0.8156862745, green: 0.8235294118, blue: 0.8274509804, alpha: 1.0)
      /// <span style='background-color: #E6E6E6; color: #191919; padding: 1px 3px;'>#E6E6E6</span> Sky Gray
      static let skyGray = Rswift.ColorResource(name: "Sky Gray", red: 0.9019607843, green: 0.9019607843, blue: 0.9019607843, alpha: 1.0)
      /// <span style='background-color: #F1F1F2; color: #0E0E0D; padding: 1px 3px;'>#F1F1F2</span> Pale Gray
      static let paleGray = Rswift.ColorResource(name: "Pale Gray", red: 0.9450980392, green: 0.9450980392, blue: 0.9490196078, alpha: 1.0)
      /// <span style='background-color: #F6F6F6; color: #090909; padding: 1px 3px;'>#F6F6F6</span> Snow White
      static let snowWhite = Rswift.ColorResource(name: "Snow White", red: 0.9647058824, green: 0.9647058824, blue: 0.9647058824, alpha: 1.0)
      /// <span style='background-color: #F8E81C; color: #0717E3; padding: 1px 3px;'>#F8E81C</span> Sun Yellow
      static let sunYellow = Rswift.ColorResource(name: "Sun Yellow", red: 0.9725490196, green: 0.9098039216, blue: 0.1098039216, alpha: 1.0)
      /// <span style='background-color: #FF590DBF; color: #00A6F2; padding: 1px 3px;'>#FF590DBF</span> Bright Orange
      static let brightOrange = Rswift.ColorResource(name: "Bright Orange", red: 1.0, green: 0.3490196078, blue: 0.05098039216, alpha: 0.75)
      /// <span style='background-color: #FFFFFF; color: #000000; padding: 1px 3px;'>#FFFFFF</span> Vanilla White
      static let vanillaWhite = Rswift.ColorResource(name: "Vanilla White", red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
      
      /// <span style='background-color: #000000; color: #FFFFFF; padding: 1px 3px;'>#000000</span> Plain Black
      /// 
      /// UIColor(red: 0.0, green: 0.0, blue: 0.0, alpha: 1.0)
      static func plainBlack(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.0, green: 0.0, blue: 0.0, alpha: 1.0)
      }
      
      /// <span style='background-color: #053866; color: #FAC799; padding: 1px 3px;'>#053866</span> Marine Blue
      /// 
      /// UIColor(red: 0.01960784314, green: 0.2196078431, blue: 0.4, alpha: 1.0)
      static func marineBlue(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.01960784314, green: 0.2196078431, blue: 0.4, alpha: 1.0)
      }
      
      /// <span style='background-color: #0A6FCC; color: #F59033; padding: 1px 3px;'>#0A6FCC</span> Ocean Blue
      /// 
      /// UIColor(red: 0.03921568627, green: 0.4352941176, blue: 0.8, alpha: 1.0)
      static func oceanBlue(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.03921568627, green: 0.4352941176, blue: 0.8, alpha: 1.0)
      }
      
      /// <span style='background-color: #0D8BFF; color: #F27400; padding: 1px 3px;'>#0D8BFF</span> Water Blue
      /// 
      /// UIColor(red: 0.05098039216, green: 0.5450980392, blue: 1.0, alpha: 1.0)
      static func waterBlue(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.05098039216, green: 0.5450980392, blue: 1.0, alpha: 1.0)
      }
      
      /// <span style='background-color: #212121; color: #DEDEDE; padding: 1px 3px;'>#212121</span> Deep Gray
      /// 
      /// UIColor(red: 0.1294117647, green: 0.1294117647, blue: 0.1294117647, alpha: 1.0)
      static func deepGray(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.1294117647, green: 0.1294117647, blue: 0.1294117647, alpha: 1.0)
      }
      
      /// <span style='background-color: #231F20; color: #DCE0DF; padding: 1px 3px;'>#231F20</span> Onyx Gray
      /// 
      /// UIColor(red: 0.137254902, green: 0.1215686275, blue: 0.1254901961, alpha: 1.0)
      static func onyxGray(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.137254902, green: 0.1215686275, blue: 0.1254901961, alpha: 1.0)
      }
      
      /// <span style='background-color: #4A4A4A; color: #B5B5B5; padding: 1px 3px;'>#4A4A4A</span> Iron Gray
      /// 
      /// UIColor(red: 0.2901960784, green: 0.2901960784, blue: 0.2901960784, alpha: 1.0)
      static func ironGray(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.2901960784, green: 0.2901960784, blue: 0.2901960784, alpha: 1.0)
      }
      
      /// <span style='background-color: #58595B; color: #A7A6A4; padding: 1px 3px;'>#58595B</span> Slate Gray
      /// 
      /// UIColor(red: 0.3450980392, green: 0.3490196078, blue: 0.3568627451, alpha: 1.0)
      static func slateGray(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.3450980392, green: 0.3490196078, blue: 0.3568627451, alpha: 1.0)
      }
      
      /// <span style='background-color: #646464; color: #9B9B9B; padding: 1px 3px;'>#646464</span> Search Gray
      /// 
      /// UIColor(red: 0.3921568627, green: 0.3921568627, blue: 0.3921568627, alpha: 1.0)
      static func searchGray(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.3921568627, green: 0.3921568627, blue: 0.3921568627, alpha: 1.0)
      }
      
      /// <span style='background-color: #65B47C; color: #9A4B83; padding: 1px 3px;'>#65B47C</span> Grass Green
      /// 
      /// UIColor(red: 0.3960784314, green: 0.7058823529, blue: 0.4862745098, alpha: 1.0)
      static func grassGreen(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.3960784314, green: 0.7058823529, blue: 0.4862745098, alpha: 1.0)
      }
      
      /// <span style='background-color: #838383; color: #7C7C7C; padding: 1px 3px;'>#838383</span> Warm Gray
      /// 
      /// UIColor(red: 0.5137254902, green: 0.5137254902, blue: 0.5137254902, alpha: 1.0)
      static func warmGray(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.5137254902, green: 0.5137254902, blue: 0.5137254902, alpha: 1.0)
      }
      
      /// <span style='background-color: #929497; color: #6D6B68; padding: 1px 3px;'>#929497</span> Hathi Gray
      /// 
      /// UIColor(red: 0.5725490196, green: 0.5803921569, blue: 0.5921568627, alpha: 1.0)
      static func hathiGray(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.5725490196, green: 0.5803921569, blue: 0.5921568627, alpha: 1.0)
      }
      
      /// <span style='background-color: #9B9B9B; color: #646464; padding: 1px 3px;'>#9B9B9B</span> Storm Gray
      /// 
      /// UIColor(red: 0.6078431373, green: 0.6078431373, blue: 0.6078431373, alpha: 1.0)
      static func stormGray(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.6078431373, green: 0.6078431373, blue: 0.6078431373, alpha: 1.0)
      }
      
      /// <span style='background-color: #A980FF; color: #567F00; padding: 1px 3px;'>#A980FF</span> Indigo
      /// 
      /// UIColor(red: 0.662745098, green: 0.5019607843, blue: 1.0, alpha: 1.0)
      static func indigo(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.662745098, green: 0.5019607843, blue: 1.0, alpha: 1.0)
      }
      
      /// <span style='background-color: #D0021B; color: #2FFDE4; padding: 1px 3px;'>#D0021B</span> Scarlet Red
      /// 
      /// UIColor(red: 0.8156862745, green: 0.007843137255, blue: 0.1058823529, alpha: 1.0)
      static func scarletRed(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.8156862745, green: 0.007843137255, blue: 0.1058823529, alpha: 1.0)
      }
      
      /// <span style='background-color: #D0D2D3; color: #2F2D2C; padding: 1px 3px;'>#D0D2D3</span> Silver
      /// 
      /// UIColor(red: 0.8156862745, green: 0.8235294118, blue: 0.8274509804, alpha: 1.0)
      static func silver(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.8156862745, green: 0.8235294118, blue: 0.8274509804, alpha: 1.0)
      }
      
      /// <span style='background-color: #E6E6E6; color: #191919; padding: 1px 3px;'>#E6E6E6</span> Sky Gray
      /// 
      /// UIColor(red: 0.9019607843, green: 0.9019607843, blue: 0.9019607843, alpha: 1.0)
      static func skyGray(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.9019607843, green: 0.9019607843, blue: 0.9019607843, alpha: 1.0)
      }
      
      /// <span style='background-color: #F1F1F2; color: #0E0E0D; padding: 1px 3px;'>#F1F1F2</span> Pale Gray
      /// 
      /// UIColor(red: 0.9450980392, green: 0.9450980392, blue: 0.9490196078, alpha: 1.0)
      static func paleGray(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.9450980392, green: 0.9450980392, blue: 0.9490196078, alpha: 1.0)
      }
      
      /// <span style='background-color: #F6F6F6; color: #090909; padding: 1px 3px;'>#F6F6F6</span> Snow White
      /// 
      /// UIColor(red: 0.9647058824, green: 0.9647058824, blue: 0.9647058824, alpha: 1.0)
      static func snowWhite(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.9647058824, green: 0.9647058824, blue: 0.9647058824, alpha: 1.0)
      }
      
      /// <span style='background-color: #F8E81C; color: #0717E3; padding: 1px 3px;'>#F8E81C</span> Sun Yellow
      /// 
      /// UIColor(red: 0.9725490196, green: 0.9098039216, blue: 0.1098039216, alpha: 1.0)
      static func sunYellow(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.9725490196, green: 0.9098039216, blue: 0.1098039216, alpha: 1.0)
      }
      
      /// <span style='background-color: #FF590DBF; color: #00A6F2; padding: 1px 3px;'>#FF590DBF</span> Bright Orange
      /// 
      /// UIColor(red: 1.0, green: 0.3490196078, blue: 0.05098039216, alpha: 0.75)
      static func brightOrange(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 1.0, green: 0.3490196078, blue: 0.05098039216, alpha: 0.75)
      }
      
      /// <span style='background-color: #FFFFFF; color: #000000; padding: 1px 3px;'>#FFFFFF</span> Vanilla White
      /// 
      /// UIColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
      static func vanillaWhite(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 19 files.
  struct file {
    /// Resource file `AlegreyaSans-Black.otf`.
    static let alegreyaSansBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AlegreyaSans-Black", pathExtension: "otf")
    /// Resource file `AlegreyaSans-Bold.otf`.
    static let alegreyaSansBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AlegreyaSans-Bold", pathExtension: "otf")
    /// Resource file `AlegreyaSans-ExtraBold.otf`.
    static let alegreyaSansExtraBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AlegreyaSans-ExtraBold", pathExtension: "otf")
    /// Resource file `AlegreyaSans-Medium.otf`.
    static let alegreyaSansMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AlegreyaSans-Medium", pathExtension: "otf")
    /// Resource file `AlegreyaSans-Regular.otf`.
    static let alegreyaSansRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AlegreyaSans-Regular", pathExtension: "otf")
    /// Resource file `Arrow Colors.clr`.
    static let arrowColorsClr = Rswift.FileResource(bundle: R.hostingBundle, name: "Arrow Colors", pathExtension: "clr")
    /// Resource file `EmptyMessagesInformativeText.rtf`.
    static let emptyMessagesInformativeTextRtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EmptyMessagesInformativeText", pathExtension: "rtf")
    /// Resource file `GoogleMaps.bundle`.
    static let googleMapsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleMaps", pathExtension: "bundle")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `NBPhoneNumberMetadata.plist`.
    static let nBPhoneNumberMetadataPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "NBPhoneNumberMetadata", pathExtension: "plist")
    /// Resource file `WorkSans-Black.otf`.
    static let workSansBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "WorkSans-Black", pathExtension: "otf")
    /// Resource file `WorkSans-Bold.otf`.
    static let workSansBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "WorkSans-Bold", pathExtension: "otf")
    /// Resource file `WorkSans-ExtraBold.otf`.
    static let workSansExtraBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "WorkSans-ExtraBold", pathExtension: "otf")
    /// Resource file `WorkSans-Medium.otf`.
    static let workSansMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "WorkSans-Medium", pathExtension: "otf")
    /// Resource file `WorkSans-Regular.otf`.
    static let workSansRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "WorkSans-Regular", pathExtension: "otf")
    /// Resource file `WorkSans-SemiBold.otf`.
    static let workSansSemiBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "WorkSans-SemiBold", pathExtension: "otf")
    /// Resource file `messages.json`.
    static let messagesJson = Rswift.FileResource(bundle: R.hostingBundle, name: "messages", pathExtension: "json")
    /// Resource file `pointsOfInterest.json`.
    static let pointsOfInterestJson = Rswift.FileResource(bundle: R.hostingBundle, name: "pointsOfInterest", pathExtension: "json")
    /// Resource file `style.json`.
    static let styleJson = Rswift.FileResource(bundle: R.hostingBundle, name: "style", pathExtension: "json")
    
    /// `bundle.url(forResource: "AlegreyaSans-Black", withExtension: "otf")`
    static func alegreyaSansBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alegreyaSansBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "AlegreyaSans-Bold", withExtension: "otf")`
    static func alegreyaSansBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alegreyaSansBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "AlegreyaSans-ExtraBold", withExtension: "otf")`
    static func alegreyaSansExtraBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alegreyaSansExtraBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "AlegreyaSans-Medium", withExtension: "otf")`
    static func alegreyaSansMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alegreyaSansMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "AlegreyaSans-Regular", withExtension: "otf")`
    static func alegreyaSansRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alegreyaSansRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Arrow Colors", withExtension: "clr")`
    static func arrowColorsClr(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.arrowColorsClr
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EmptyMessagesInformativeText", withExtension: "rtf")`
    static func emptyMessagesInformativeTextRtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emptyMessagesInformativeTextRtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleMaps", withExtension: "bundle")`
    static func googleMapsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleMapsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "NBPhoneNumberMetadata", withExtension: "plist")`
    static func nBPhoneNumberMetadataPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nBPhoneNumberMetadataPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "WorkSans-Black", withExtension: "otf")`
    static func workSansBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workSansBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "WorkSans-Bold", withExtension: "otf")`
    static func workSansBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workSansBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "WorkSans-ExtraBold", withExtension: "otf")`
    static func workSansExtraBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workSansExtraBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "WorkSans-Medium", withExtension: "otf")`
    static func workSansMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workSansMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "WorkSans-Regular", withExtension: "otf")`
    static func workSansRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workSansRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "WorkSans-SemiBold", withExtension: "otf")`
    static func workSansSemiBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workSansSemiBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "messages", withExtension: "json")`
    static func messagesJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.messagesJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "pointsOfInterest", withExtension: "json")`
    static func pointsOfInterestJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pointsOfInterestJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "style", withExtension: "json")`
    static func styleJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.styleJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 11 fonts.
  struct font: Rswift.Validatable {
    /// Font `AlegreyaSans-Black`.
    static let alegreyaSansBlack = Rswift.FontResource(fontName: "AlegreyaSans-Black")
    /// Font `AlegreyaSans-Bold`.
    static let alegreyaSansBold = Rswift.FontResource(fontName: "AlegreyaSans-Bold")
    /// Font `AlegreyaSans-ExtraBold`.
    static let alegreyaSansExtraBold = Rswift.FontResource(fontName: "AlegreyaSans-ExtraBold")
    /// Font `AlegreyaSans-Medium`.
    static let alegreyaSansMedium = Rswift.FontResource(fontName: "AlegreyaSans-Medium")
    /// Font `AlegreyaSans-Regular`.
    static let alegreyaSansRegular = Rswift.FontResource(fontName: "AlegreyaSans-Regular")
    /// Font `WorkSans-Black`.
    static let workSansBlack = Rswift.FontResource(fontName: "WorkSans-Black")
    /// Font `WorkSans-Bold`.
    static let workSansBold = Rswift.FontResource(fontName: "WorkSans-Bold")
    /// Font `WorkSans-ExtraBold`.
    static let workSansExtraBold = Rswift.FontResource(fontName: "WorkSans-ExtraBold")
    /// Font `WorkSans-Medium`.
    static let workSansMedium = Rswift.FontResource(fontName: "WorkSans-Medium")
    /// Font `WorkSans-Regular`.
    static let workSansRegular = Rswift.FontResource(fontName: "WorkSans-Regular")
    /// Font `WorkSans-SemiBold`.
    static let workSansSemiBold = Rswift.FontResource(fontName: "WorkSans-SemiBold")
    
    /// `UIFont(name: "AlegreyaSans-Black", size: ...)`
    static func alegreyaSansBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: alegreyaSansBlack, size: size)
    }
    
    /// `UIFont(name: "AlegreyaSans-Bold", size: ...)`
    static func alegreyaSansBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: alegreyaSansBold, size: size)
    }
    
    /// `UIFont(name: "AlegreyaSans-ExtraBold", size: ...)`
    static func alegreyaSansExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: alegreyaSansExtraBold, size: size)
    }
    
    /// `UIFont(name: "AlegreyaSans-Medium", size: ...)`
    static func alegreyaSansMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: alegreyaSansMedium, size: size)
    }
    
    /// `UIFont(name: "AlegreyaSans-Regular", size: ...)`
    static func alegreyaSansRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: alegreyaSansRegular, size: size)
    }
    
    /// `UIFont(name: "WorkSans-Black", size: ...)`
    static func workSansBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: workSansBlack, size: size)
    }
    
    /// `UIFont(name: "WorkSans-Bold", size: ...)`
    static func workSansBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: workSansBold, size: size)
    }
    
    /// `UIFont(name: "WorkSans-ExtraBold", size: ...)`
    static func workSansExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: workSansExtraBold, size: size)
    }
    
    /// `UIFont(name: "WorkSans-Medium", size: ...)`
    static func workSansMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: workSansMedium, size: size)
    }
    
    /// `UIFont(name: "WorkSans-Regular", size: ...)`
    static func workSansRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: workSansRegular, size: size)
    }
    
    /// `UIFont(name: "WorkSans-SemiBold", size: ...)`
    static func workSansSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: workSansSemiBold, size: size)
    }
    
    static func validate() throws {
      if R.font.alegreyaSansMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AlegreyaSans-Medium' could not be loaded, is 'AlegreyaSans-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.workSansBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'WorkSans-Bold' could not be loaded, is 'WorkSans-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.workSansRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'WorkSans-Regular' could not be loaded, is 'WorkSans-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.alegreyaSansRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AlegreyaSans-Regular' could not be loaded, is 'AlegreyaSans-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.workSansSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'WorkSans-SemiBold' could not be loaded, is 'WorkSans-SemiBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.workSansBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'WorkSans-Black' could not be loaded, is 'WorkSans-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.workSansMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'WorkSans-Medium' could not be loaded, is 'WorkSans-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.workSansExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'WorkSans-ExtraBold' could not be loaded, is 'WorkSans-ExtraBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.alegreyaSansBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AlegreyaSans-Bold' could not be loaded, is 'AlegreyaSans-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.alegreyaSansExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AlegreyaSans-ExtraBold' could not be loaded, is 'AlegreyaSans-ExtraBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.alegreyaSansBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AlegreyaSans-Black' could not be loaded, is 'AlegreyaSans-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 291 images.
  struct image {
    /// Image `AddBubbleIcon`.
    static let addBubbleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddBubbleIcon")
    /// Image `AddCircularIcon`.
    static let addCircularIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddCircularIcon")
    /// Image `AddPlusIcon`.
    static let addPlusIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddPlusIcon")
    /// Image `ArrowCompactLogo`.
    static let arrowCompactLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowCompactLogo")
    /// Image `ArrowFullLogoNavBar`.
    static let arrowFullLogoNavBar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowFullLogoNavBar")
    /// Image `ArrowFullLogo`.
    static let arrowFullLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowFullLogo")
    /// Image `BETAIMAGE`.
    static let bETAIMAGE = Rswift.ImageResource(bundle: R.hostingBundle, name: "BETAIMAGE")
    /// Image `BarMapMarker`.
    static let barMapMarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "BarMapMarker")
    /// Image `BlueArrowLarge`.
    static let blueArrowLarge = Rswift.ImageResource(bundle: R.hostingBundle, name: "BlueArrowLarge")
    /// Image `BlueGradientCircle`.
    static let blueGradientCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "BlueGradientCircle")
    /// Image `BlueGradientRectangle`.
    static let blueGradientRectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "BlueGradientRectangle")
    /// Image `BookmarkDisabledRoundIcon`.
    static let bookmarkDisabledRoundIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "BookmarkDisabledRoundIcon")
    /// Image `BookmarkRoundIcon`.
    static let bookmarkRoundIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "BookmarkRoundIcon")
    /// Image `BookmarksRoundIcon`.
    static let bookmarksRoundIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "BookmarksRoundIcon")
    /// Image `BorderedXCloseIcon`.
    static let borderedXCloseIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "BorderedXCloseIcon")
    /// Image `BubblesIcon`.
    static let bubblesIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "BubblesIcon")
    /// Image `BubblesRoundIcon`.
    static let bubblesRoundIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "BubblesRoundIcon")
    /// Image `CameraShutterIcon`.
    static let cameraShutterIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CameraShutterIcon")
    /// Image `CameraTabIcon`.
    static let cameraTabIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CameraTabIcon")
    /// Image `Cameron`.
    static let cameron = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cameron")
    /// Image `CheckInDisabledRoundIcon`.
    static let checkInDisabledRoundIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CheckInDisabledRoundIcon")
    /// Image `CheckInRoundIcon`.
    static let checkInRoundIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CheckInRoundIcon")
    /// Image `CheckMarkIcon`.
    static let checkMarkIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CheckMarkIcon")
    /// Image `CircularActivityIndicator`.
    static let circularActivityIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "CircularActivityIndicator")
    /// Image `CloseIcon`.
    static let closeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CloseIcon")
    /// Image `CurrentLocationIcon`.
    static let currentLocationIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CurrentLocationIcon")
    /// Image `DrawerHandle`.
    static let drawerHandle = Rswift.ImageResource(bundle: R.hostingBundle, name: "DrawerHandle")
    /// Image `DrawerTop`.
    static let drawerTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "DrawerTop")
    /// Image `DropDownArrowDark`.
    static let dropDownArrowDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "DropDownArrowDark")
    /// Image `DropDownArrowLight`.
    static let dropDownArrowLight = Rswift.ImageResource(bundle: R.hostingBundle, name: "DropDownArrowLight")
    /// Image `EditIconFilledLarge`.
    static let editIconFilledLarge = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditIconFilledLarge")
    /// Image `EditIconFilled`.
    static let editIconFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditIconFilled")
    /// Image `EditIconOutlined`.
    static let editIconOutlined = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditIconOutlined")
    /// Image `ExclamationCircularIcon`.
    static let exclamationCircularIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ExclamationCircularIcon")
    /// Image `FireIconFilled`.
    static let fireIconFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "FireIconFilled")
    /// Image `FlashAutoIcon`.
    static let flashAutoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "FlashAutoIcon")
    /// Image `FlashOffIcon`.
    static let flashOffIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "FlashOffIcon")
    /// Image `FlashOnIcon`.
    static let flashOnIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "FlashOnIcon")
    /// Image `FocusVisualCue`.
    static let focusVisualCue = Rswift.ImageResource(bundle: R.hostingBundle, name: "FocusVisualCue")
    /// Image `ForwardArrowIcon`.
    static let forwardArrowIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ForwardArrowIcon")
    /// Image `FriendsRoundIcon`.
    static let friendsRoundIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "FriendsRoundIcon")
    /// Image `GearIcon`.
    static let gearIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "GearIcon")
    /// Image `GymMapMarker`.
    static let gymMapMarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "GymMapMarker")
    /// Image `InfoIcon`.
    static let infoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "InfoIcon")
    /// Image `LocationIcon`.
    static let locationIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "LocationIcon")
    /// Image `LocationRoundIcon`.
    static let locationRoundIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "LocationRoundIcon")
    /// Image `MapControlsBackground`.
    static let mapControlsBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapControlsBackground")
    /// Image `MapMarkerBar2D`.
    static let mapMarkerBar2D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerBar2D")
    /// Image `MapMarkerBar3D`.
    static let mapMarkerBar3D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerBar3D")
    /// Image `MapMarkerBarShadow3D`.
    static let mapMarkerBarShadow3D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerBarShadow3D")
    /// Image `MapMarkerFlameDead`.
    static let mapMarkerFlameDead = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerFlameDead")
    /// Image `MapMarkerFlameDecentScene`.
    static let mapMarkerFlameDecentScene = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerFlameDecentScene")
    /// Image `MapMarkerFlameLit`.
    static let mapMarkerFlameLit = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerFlameLit")
    /// Image `MapMarkerFlamePrettyChill`.
    static let mapMarkerFlamePrettyChill = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerFlamePrettyChill")
    /// Image `MapMarkerFlameVeryLively`.
    static let mapMarkerFlameVeryLively = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerFlameVeryLively")
    /// Image `MapMarkerGlassDead`.
    static let mapMarkerGlassDead = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerGlassDead")
    /// Image `MapMarkerGlassDecentScene`.
    static let mapMarkerGlassDecentScene = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerGlassDecentScene")
    /// Image `MapMarkerGlassLit`.
    static let mapMarkerGlassLit = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerGlassLit")
    /// Image `MapMarkerGlassPrettyChill`.
    static let mapMarkerGlassPrettyChill = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerGlassPrettyChill")
    /// Image `MapMarkerGlassVeryLively`.
    static let mapMarkerGlassVeryLively = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerGlassVeryLively")
    /// Image `MapMarkerGym2D`.
    static let mapMarkerGym2D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerGym2D")
    /// Image `MapMarkerGym3D`.
    static let mapMarkerGym3D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerGym3D")
    /// Image `MapMarkerGymShadow3D`.
    static let mapMarkerGymShadow3D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerGymShadow3D")
    /// Image `MapMarkerMedia2D`.
    static let mapMarkerMedia2D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerMedia2D")
    /// Image `MapMarkerMedia3D`.
    static let mapMarkerMedia3D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerMedia3D")
    /// Image `MapMarkerMediaShadow3D`.
    static let mapMarkerMediaShadow3D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerMediaShadow3D")
    /// Image `MapMarkerMovies2D`.
    static let mapMarkerMovies2D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerMovies2D")
    /// Image `MapMarkerMovies3D`.
    static let mapMarkerMovies3D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerMovies3D")
    /// Image `MapMarkerMoviesShadow3D`.
    static let mapMarkerMoviesShadow3D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerMoviesShadow3D")
    /// Image `MapMarkerOutdoorRec2D`.
    static let mapMarkerOutdoorRec2D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerOutdoorRec2D")
    /// Image `MapMarkerOutdoorRec3D`.
    static let mapMarkerOutdoorRec3D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerOutdoorRec3D")
    /// Image `MapMarkerOutdoorRecShadow3D`.
    static let mapMarkerOutdoorRecShadow3D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerOutdoorRecShadow3D")
    /// Image `MapMarkerOvalDead`.
    static let mapMarkerOvalDead = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerOvalDead")
    /// Image `MapMarkerOvalDecentScene`.
    static let mapMarkerOvalDecentScene = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerOvalDecentScene")
    /// Image `MapMarkerOvalLit`.
    static let mapMarkerOvalLit = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerOvalLit")
    /// Image `MapMarkerOvalPrettyChill`.
    static let mapMarkerOvalPrettyChill = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerOvalPrettyChill")
    /// Image `MapMarkerOvalVeryLively`.
    static let mapMarkerOvalVeryLively = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerOvalVeryLively")
    /// Image `MapMarkerRestaurant2D`.
    static let mapMarkerRestaurant2D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerRestaurant2D")
    /// Image `MapMarkerRestaurant3D`.
    static let mapMarkerRestaurant3D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerRestaurant3D")
    /// Image `MapMarkerRestaurantShadow3D`.
    static let mapMarkerRestaurantShadow3D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapMarkerRestaurantShadow3D")
    /// Image `MapPopupLocationIndicator`.
    static let mapPopupLocationIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapPopupLocationIndicator")
    /// Image `MapTabIconSelected`.
    static let mapTabIconSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapTabIconSelected")
    /// Image `MapTabIcon`.
    static let mapTabIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapTabIcon")
    /// Image `MapsFlag2D`.
    static let mapsFlag2D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapsFlag2D")
    /// Image `MapsFlag3D`.
    static let mapsFlag3D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapsFlag3D")
    /// Image `MapsMarkerInfoBattery`.
    static let mapsMarkerInfoBattery = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapsMarkerInfoBattery")
    /// Image `MapsMarkerInfoBottom`.
    static let mapsMarkerInfoBottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapsMarkerInfoBottom")
    /// Image `MapsMarkerInfoCallout`.
    static let mapsMarkerInfoCallout = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapsMarkerInfoCallout")
    /// Image `MapsMarkerInfoLocation`.
    static let mapsMarkerInfoLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapsMarkerInfoLocation")
    /// Image `MapsMarkerInfoMessage`.
    static let mapsMarkerInfoMessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapsMarkerInfoMessage")
    /// Image `MapsMarkerInfoTop`.
    static let mapsMarkerInfoTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapsMarkerInfoTop")
    /// Image `MapsMarkerInfoVerticalDivider`.
    static let mapsMarkerInfoVerticalDivider = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapsMarkerInfoVerticalDivider")
    /// Image `MapsMarkerPOIBackground3D`.
    static let mapsMarkerPOIBackground3D = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapsMarkerPOIBackground3D")
    /// Image `MapsPOI3DMarkerBackground`.
    static let mapsPOI3DMarkerBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapsPOI3DMarkerBackground")
    /// Image `MeetingIcon`.
    static let meetingIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MeetingIcon")
    /// Image `MessagesBubble`.
    static let messagesBubble = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagesBubble")
    /// Image `MessagesCellContentContainerBackground`.
    static let messagesCellContentContainerBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagesCellContentContainerBackground")
    /// Image `MessagesChat`.
    static let messagesChat = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagesChat")
    /// Image `MessagesEmptyHeart`.
    static let messagesEmptyHeart = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagesEmptyHeart")
    /// Image `MessagesGroupChat`.
    static let messagesGroupChat = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagesGroupChat")
    /// Image `MessagesHide`.
    static let messagesHide = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagesHide")
    /// Image `MessagesMark`.
    static let messagesMark = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagesMark")
    /// Image `MessagesMediaSelected`.
    static let messagesMediaSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagesMediaSelected")
    /// Image `MessagesMedia`.
    static let messagesMedia = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagesMedia")
    /// Image `MessagesMute`.
    static let messagesMute = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagesMute")
    /// Image `MessagesSend`.
    static let messagesSend = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagesSend")
    /// Image `MessagesUnreadIndicator`.
    static let messagesUnreadIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagesUnreadIndicator")
    /// Image `MessagingCameraIcon`.
    static let messagingCameraIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagingCameraIcon")
    /// Image `MessagingEmojiIcon`.
    static let messagingEmojiIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagingEmojiIcon")
    /// Image `MessagingGalleryIcon`.
    static let messagingGalleryIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagingGalleryIcon")
    /// Image `MessagingGallerySharingSelectedBadge`.
    static let messagingGallerySharingSelectedBadge = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagingGallerySharingSelectedBadge")
    /// Image `MessagingLocationIcon`.
    static let messagingLocationIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagingLocationIcon")
    /// Image `MessagingPollIcon`.
    static let messagingPollIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagingPollIcon")
    /// Image `MessagingTabIconSelected`.
    static let messagingTabIconSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagingTabIconSelected")
    /// Image `MessagingTabIcon`.
    static let messagingTabIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagingTabIcon")
    /// Image `MessagingVoiceIcon`.
    static let messagingVoiceIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagingVoiceIcon")
    /// Image `MoviesMapMarker`.
    static let moviesMapMarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "MoviesMapMarker")
    /// Image `MyLocationMarker`.
    static let myLocationMarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyLocationMarker")
    /// Image `NavigateRoundIcon`.
    static let navigateRoundIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "NavigateRoundIcon")
    /// Image `NavigationBackArrow`.
    static let navigationBackArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "NavigationBackArrow")
    /// Image `NavigationMenuIcon`.
    static let navigationMenuIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "NavigationMenuIcon")
    /// Image `NewMeetingBackground`.
    static let newMeetingBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "NewMeetingBackground")
    /// Image `NewMeetingIcon`.
    static let newMeetingIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "NewMeetingIcon")
    /// Image `NewMessageIcon`.
    static let newMessageIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "NewMessageIcon")
    /// Image `OutdoorRecMapMarker`.
    static let outdoorRecMapMarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "OutdoorRecMapMarker")
    /// Image `POINavLargeIcon`.
    static let pOINavLargeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "POINavLargeIcon")
    /// Image `POINavMapMarker`.
    static let pOINavMapMarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "POINavMapMarker")
    /// Image `PaperPlaneIcon`.
    static let paperPlaneIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "PaperPlaneIcon")
    /// Image `PhoneRoundIcon`.
    static let phoneRoundIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "PhoneRoundIcon")
    /// Image `PlaceholderImage`.
    static let placeholderImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlaceholderImage")
    /// Image `ProfileTabIconSelected`.
    static let profileTabIconSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfileTabIconSelected")
    /// Image `ProfileTabIcon`.
    static let profileTabIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfileTabIcon")
    /// Image `PromoBubbles`.
    static let promoBubbles = Rswift.ImageResource(bundle: R.hostingBundle, name: "PromoBubbles")
    /// Image `PromoEvents`.
    static let promoEvents = Rswift.ImageResource(bundle: R.hostingBundle, name: "PromoEvents")
    /// Image `PromoGalleries`.
    static let promoGalleries = Rswift.ImageResource(bundle: R.hostingBundle, name: "PromoGalleries")
    /// Image `PromoMessages`.
    static let promoMessages = Rswift.ImageResource(bundle: R.hostingBundle, name: "PromoMessages")
    /// Image `PromoPOIs`.
    static let promoPOIs = Rswift.ImageResource(bundle: R.hostingBundle, name: "PromoPOIs")
    /// Image `RatingFlameEmpty`.
    static let ratingFlameEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "RatingFlameEmpty")
    /// Image `RatingFlameFilled`.
    static let ratingFlameFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "RatingFlameFilled")
    /// Image `RatingFlameHalf`.
    static let ratingFlameHalf = Rswift.ImageResource(bundle: R.hostingBundle, name: "RatingFlameHalf")
    /// Image `RedXCircle`.
    static let redXCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "RedXCircle")
    /// Image `RestaurantMapMarker`.
    static let restaurantMapMarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "RestaurantMapMarker")
    /// Image `RightArrowIcon`.
    static let rightArrowIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "RightArrowIcon")
    /// Image `RoundLocationIcon`.
    static let roundLocationIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "RoundLocationIcon")
    /// Image `Sabine`.
    static let sabine = Rswift.ImageResource(bundle: R.hostingBundle, name: "Sabine")
    /// Image `SearchFiltersIcon`.
    static let searchFiltersIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SearchFiltersIcon")
    /// Image `SearchTabIconSelected`.
    static let searchTabIconSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "SearchTabIconSelected")
    /// Image `SearchTabIcon`.
    static let searchTabIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SearchTabIcon")
    /// Image `Search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "Search")
    /// Image `SettingOptionDisclose`.
    static let settingOptionDisclose = Rswift.ImageResource(bundle: R.hostingBundle, name: "SettingOptionDisclose")
    /// Image `SettingOptionSwitchOff`.
    static let settingOptionSwitchOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "SettingOptionSwitchOff")
    /// Image `SettingOptionSwitchOn`.
    static let settingOptionSwitchOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "SettingOptionSwitchOn")
    /// Image `Submit Button`.
    static let submitButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Submit Button")
    /// Image `SwitchCameraIcon`.
    static let switchCameraIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SwitchCameraIcon")
    /// Image `ThreeDimensionProjection`.
    static let threeDimensionProjection = Rswift.ImageResource(bundle: R.hostingBundle, name: "ThreeDimensionProjection")
    /// Image `ThunderBuddies`.
    static let thunderBuddies = Rswift.ImageResource(bundle: R.hostingBundle, name: "ThunderBuddies")
    /// Image `Tony`.
    static let tony = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tony")
    /// Image `TwoDimensionProjection`.
    static let twoDimensionProjection = Rswift.ImageResource(bundle: R.hostingBundle, name: "TwoDimensionProjection")
    /// Image `WarningIcon`.
    static let warningIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "WarningIcon")
    /// Image `addPhotoInfo`.
    static let addPhotoInfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "addPhotoInfo")
    /// Image `addVideoInfo`.
    static let addVideoInfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "addVideoInfo")
    /// Image `amusement_bw`.
    static let amusement_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "amusement_bw")
    /// Image `amusement`.
    static let amusement = Rswift.ImageResource(bundle: R.hostingBundle, name: "amusement")
    /// Image `answeredIcon`.
    static let answeredIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "answeredIcon")
    /// Image `appleTouchIcon`.
    static let appleTouchIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "appleTouchIcon")
    /// Image `arrowPoll`.
    static let arrowPoll = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowPoll")
    /// Image `arrowSmall`.
    static let arrowSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowSmall")
    /// Image `audioBackground`.
    static let audioBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "audioBackground")
    /// Image `audioRecordBackground`.
    static let audioRecordBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "audioRecordBackground")
    /// Image `audioShadow`.
    static let audioShadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "audioShadow")
    /// Image `backarrow`.
    static let backarrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "backarrow")
    /// Image `barLit2`.
    static let barLit2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "barLit2")
    /// Image `barLit_high`.
    static let barLit_high = Rswift.ImageResource(bundle: R.hostingBundle, name: "barLit_high")
    /// Image `barLit_low`.
    static let barLit_low = Rswift.ImageResource(bundle: R.hostingBundle, name: "barLit_low")
    /// Image `barLit_mid`.
    static let barLit_mid = Rswift.ImageResource(bundle: R.hostingBundle, name: "barLit_mid")
    /// Image `barLit_normal`.
    static let barLit_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "barLit_normal")
    /// Image `barLit`.
    static let barLit = Rswift.ImageResource(bundle: R.hostingBundle, name: "barLit")
    /// Image `bar_lit_cold`.
    static let bar_lit_cold = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar_lit_cold")
    /// Image `bar_lit_hot`.
    static let bar_lit_hot = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar_lit_hot")
    /// Image `bar_lit_none`.
    static let bar_lit_none = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar_lit_none")
    /// Image `bar_lit_warm`.
    static let bar_lit_warm = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar_lit_warm")
    /// Image `bar`.
    static let bar = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar")
    /// Image `bars_bw`.
    static let bars_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "bars_bw")
    /// Image `bars`.
    static let bars = Rswift.ImageResource(bundle: R.hostingBundle, name: "bars")
    /// Image `blueArrow`.
    static let blueArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "blueArrow")
    /// Image `breakfast_bw`.
    static let breakfast_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "breakfast_bw")
    /// Image `breakfast`.
    static let breakfast = Rswift.ImageResource(bundle: R.hostingBundle, name: "breakfast")
    /// Image `bubbleDetail`.
    static let bubbleDetail = Rswift.ImageResource(bundle: R.hostingBundle, name: "bubbleDetail")
    /// Image `burgers_bw`.
    static let burgers_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "burgers_bw")
    /// Image `burgers`.
    static let burgers = Rswift.ImageResource(bundle: R.hostingBundle, name: "burgers")
    /// Image `callIconSmall`.
    static let callIconSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "callIconSmall")
    /// Image `callIcon`.
    static let callIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "callIcon")
    /// Image `cameraIconPoll`.
    static let cameraIconPoll = Rswift.ImageResource(bundle: R.hostingBundle, name: "cameraIconPoll")
    /// Image `chinese_bw`.
    static let chinese_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "chinese_bw")
    /// Image `chinese`.
    static let chinese = Rswift.ImageResource(bundle: R.hostingBundle, name: "chinese")
    /// Image `close_x`.
    static let close_x = Rswift.ImageResource(bundle: R.hostingBundle, name: "close_x")
    /// Image `clubs_bw`.
    static let clubs_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "clubs_bw")
    /// Image `clubs`.
    static let clubs = Rswift.ImageResource(bundle: R.hostingBundle, name: "clubs")
    /// Image `contactSelected`.
    static let contactSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "contactSelected")
    /// Image `createGroupIcon`.
    static let createGroupIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "createGroupIcon")
    /// Image `currentLocation`.
    static let currentLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "currentLocation")
    /// Image `deleteContactIcon`.
    static let deleteContactIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "deleteContactIcon")
    /// Image `deleteMediaIcon`.
    static let deleteMediaIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "deleteMediaIcon")
    /// Image `deletePoll`.
    static let deletePoll = Rswift.ImageResource(bundle: R.hostingBundle, name: "deletePoll")
    /// Image `drinkSelected`.
    static let drinkSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "drinkSelected")
    /// Image `drink`.
    static let drink = Rswift.ImageResource(bundle: R.hostingBundle, name: "drink")
    /// Image `editMenu`.
    static let editMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "editMenu")
    /// Image `emptyOval`.
    static let emptyOval = Rswift.ImageResource(bundle: R.hostingBundle, name: "emptyOval")
    /// Image `fill155`.
    static let fill155 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fill155")
    /// Image `fill182`.
    static let fill182 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fill182")
    /// Image `foodSelected`.
    static let foodSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "foodSelected")
    /// Image `food`.
    static let food = Rswift.ImageResource(bundle: R.hostingBundle, name: "food")
    /// Image `galleryIcon`.
    static let galleryIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "galleryIcon")
    /// Image `gym_bw`.
    static let gym_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "gym_bw")
    /// Image `gym`.
    static let gym = Rswift.ImageResource(bundle: R.hostingBundle, name: "gym")
    /// Image `healthy_bw`.
    static let healthy_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "healthy_bw")
    /// Image `healthy`.
    static let healthy = Rswift.ImageResource(bundle: R.hostingBundle, name: "healthy")
    /// Image `icDirectionsBike`.
    static let icDirectionsBike = Rswift.ImageResource(bundle: R.hostingBundle, name: "icDirectionsBike")
    /// Image `icDirectionsCar`.
    static let icDirectionsCar = Rswift.ImageResource(bundle: R.hostingBundle, name: "icDirectionsCar")
    /// Image `icDirectionsTransit`.
    static let icDirectionsTransit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icDirectionsTransit")
    /// Image `icDirectionsWalk`.
    static let icDirectionsWalk = Rswift.ImageResource(bundle: R.hostingBundle, name: "icDirectionsWalk")
    /// Image `indian_bw`.
    static let indian_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "indian_bw")
    /// Image `indian`.
    static let indian = Rswift.ImageResource(bundle: R.hostingBundle, name: "indian")
    /// Image `italian_bw`.
    static let italian_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "italian_bw")
    /// Image `italian`.
    static let italian = Rswift.ImageResource(bundle: R.hostingBundle, name: "italian")
    /// Image `japanese_bw`.
    static let japanese_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "japanese_bw")
    /// Image `japanese`.
    static let japanese = Rswift.ImageResource(bundle: R.hostingBundle, name: "japanese")
    /// Image `line`.
    static let line = Rswift.ImageResource(bundle: R.hostingBundle, name: "line")
    /// Image `lit_down_bg`.
    static let lit_down_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "lit_down_bg")
    /// Image `lit_up_bg`.
    static let lit_up_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "lit_up_bg")
    /// Image `live music_bw`.
    static let liveMusic_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "live music_bw")
    /// Image `live music`.
    static let liveMusic = Rswift.ImageResource(bundle: R.hostingBundle, name: "live music")
    /// Image `livemusic_bw`.
    static let livemusic_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "livemusic_bw")
    /// Image `locationSharePosition`.
    static let locationSharePosition = Rswift.ImageResource(bundle: R.hostingBundle, name: "locationSharePosition")
    /// Image `mall_bw`.
    static let mall_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_bw")
    /// Image `mall`.
    static let mall = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall")
    /// Image `mediaCloseIcon`.
    static let mediaCloseIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mediaCloseIcon")
    /// Image `mediaLocationIcon`.
    static let mediaLocationIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mediaLocationIcon")
    /// Image `mediaShareIcon`.
    static let mediaShareIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mediaShareIcon")
    /// Image `mexican_bw`.
    static let mexican_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "mexican_bw")
    /// Image `mexican`.
    static let mexican = Rswift.ImageResource(bundle: R.hostingBundle, name: "mexican")
    /// Image `middle_line`.
    static let middle_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "middle_line")
    /// Image `more_bw`.
    static let more_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "more_bw")
    /// Image `more`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "more")
    /// Image `most lit_bw`.
    static let mostLit_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "most lit_bw")
    /// Image `most lit`.
    static let mostLit = Rswift.ImageResource(bundle: R.hostingBundle, name: "most lit")
    /// Image `mostlit_bw`.
    static let mostlit_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "mostlit_bw")
    /// Image `movies_bw`.
    static let movies_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "movies_bw")
    /// Image `movies`.
    static let movies = Rswift.ImageResource(bundle: R.hostingBundle, name: "movies")
    /// Image `nightlife_bw`.
    static let nightlife_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "nightlife_bw")
    /// Image `nightlife`.
    static let nightlife = Rswift.ImageResource(bundle: R.hostingBundle, name: "nightlife")
    /// Image `orangeFlame`.
    static let orangeFlame = Rswift.ImageResource(bundle: R.hostingBundle, name: "orangeFlame")
    /// Image `outdoor_bw`.
    static let outdoor_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "outdoor_bw")
    /// Image `outdoor`.
    static let outdoor = Rswift.ImageResource(bundle: R.hostingBundle, name: "outdoor")
    /// Image `path`.
    static let path = Rswift.ImageResource(bundle: R.hostingBundle, name: "path")
    /// Image `photoMedia`.
    static let photoMedia = Rswift.ImageResource(bundle: R.hostingBundle, name: "photoMedia")
    /// Image `pizza_bw`.
    static let pizza_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "pizza_bw")
    /// Image `pizza`.
    static let pizza = Rswift.ImageResource(bundle: R.hostingBundle, name: "pizza")
    /// Image `playIconBig`.
    static let playIconBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "playIconBig")
    /// Image `playIconSmall`.
    static let playIconSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "playIconSmall")
    /// Image `playIcon`.
    static let playIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "playIcon")
    /// Image `poiWebIcon`.
    static let poiWebIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "poiWebIcon")
    /// Image `poilocationIcon`.
    static let poilocationIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "poilocationIcon")
    /// Image `restaurants_bw`.
    static let restaurants_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "restaurants_bw")
    /// Image `restaurants`.
    static let restaurants = Rswift.ImageResource(bundle: R.hostingBundle, name: "restaurants")
    /// Image `sandwich_bw`.
    static let sandwich_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "sandwich_bw")
    /// Image `sandwich`.
    static let sandwich = Rswift.ImageResource(bundle: R.hostingBundle, name: "sandwich")
    /// Image `seafood_bw`.
    static let seafood_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "seafood_bw")
    /// Image `seafood`.
    static let seafood = Rswift.ImageResource(bundle: R.hostingBundle, name: "seafood")
    /// Image `selected_vote_down`.
    static let selected_vote_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "selected_vote_down")
    /// Image `selected_vote_up`.
    static let selected_vote_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "selected_vote_up")
    /// Image `steakhouse_bw`.
    static let steakhouse_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "steakhouse_bw")
    /// Image `steakhouse`.
    static let steakhouse = Rswift.ImageResource(bundle: R.hostingBundle, name: "steakhouse")
    /// Image `sushi_bw`.
    static let sushi_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "sushi_bw")
    /// Image `sushi`.
    static let sushi = Rswift.ImageResource(bundle: R.hostingBundle, name: "sushi")
    /// Image `thai_bw`.
    static let thai_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "thai_bw")
    /// Image `thai`.
    static let thai = Rswift.ImageResource(bundle: R.hostingBundle, name: "thai")
    /// Image `theater_bw`.
    static let theater_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "theater_bw")
    /// Image `theater`.
    static let theater = Rswift.ImageResource(bundle: R.hostingBundle, name: "theater")
    /// Image `thumb_down`.
    static let thumb_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumb_down")
    /// Image `thumb_up`.
    static let thumb_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumb_up")
    /// Image `unasweredIcon`.
    static let unasweredIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "unasweredIcon")
    /// Image `unselect_vote_up`.
    static let unselect_vote_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselect_vote_up")
    /// Image `unselected_vote_down`.
    static let unselected_vote_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselected_vote_down")
    /// Image `vegetarian_bw`.
    static let vegetarian_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "vegetarian_bw")
    /// Image `vegetarian`.
    static let vegetarian = Rswift.ImageResource(bundle: R.hostingBundle, name: "vegetarian")
    /// Image `videoMedia`.
    static let videoMedia = Rswift.ImageResource(bundle: R.hostingBundle, name: "videoMedia")
    /// Image `vietnamese_bw`.
    static let vietnamese_bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "vietnamese_bw")
    /// Image `vietnamese`.
    static let vietnamese = Rswift.ImageResource(bundle: R.hostingBundle, name: "vietnamese")
    /// Image `vote_panel`.
    static let vote_panel = Rswift.ImageResource(bundle: R.hostingBundle, name: "vote_panel")
    /// Image `wave`.
    static let wave = Rswift.ImageResource(bundle: R.hostingBundle, name: "wave")
    
    /// `UIImage(named: "AddBubbleIcon", bundle: ..., traitCollection: ...)`
    static func addBubbleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addBubbleIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "AddCircularIcon", bundle: ..., traitCollection: ...)`
    static func addCircularIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addCircularIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "AddPlusIcon", bundle: ..., traitCollection: ...)`
    static func addPlusIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addPlusIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ArrowCompactLogo", bundle: ..., traitCollection: ...)`
    static func arrowCompactLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowCompactLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ArrowFullLogo", bundle: ..., traitCollection: ...)`
    static func arrowFullLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowFullLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ArrowFullLogoNavBar", bundle: ..., traitCollection: ...)`
    static func arrowFullLogoNavBar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowFullLogoNavBar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BETAIMAGE", bundle: ..., traitCollection: ...)`
    static func bETAIMAGE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bETAIMAGE, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BarMapMarker", bundle: ..., traitCollection: ...)`
    static func barMapMarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barMapMarker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BlueArrowLarge", bundle: ..., traitCollection: ...)`
    static func blueArrowLarge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blueArrowLarge, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BlueGradientCircle", bundle: ..., traitCollection: ...)`
    static func blueGradientCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blueGradientCircle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BlueGradientRectangle", bundle: ..., traitCollection: ...)`
    static func blueGradientRectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blueGradientRectangle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BookmarkDisabledRoundIcon", bundle: ..., traitCollection: ...)`
    static func bookmarkDisabledRoundIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookmarkDisabledRoundIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BookmarkRoundIcon", bundle: ..., traitCollection: ...)`
    static func bookmarkRoundIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookmarkRoundIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BookmarksRoundIcon", bundle: ..., traitCollection: ...)`
    static func bookmarksRoundIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookmarksRoundIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BorderedXCloseIcon", bundle: ..., traitCollection: ...)`
    static func borderedXCloseIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.borderedXCloseIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BubblesIcon", bundle: ..., traitCollection: ...)`
    static func bubblesIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bubblesIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BubblesRoundIcon", bundle: ..., traitCollection: ...)`
    static func bubblesRoundIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bubblesRoundIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CameraShutterIcon", bundle: ..., traitCollection: ...)`
    static func cameraShutterIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraShutterIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CameraTabIcon", bundle: ..., traitCollection: ...)`
    static func cameraTabIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraTabIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cameron", bundle: ..., traitCollection: ...)`
    static func cameron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameron, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CheckInDisabledRoundIcon", bundle: ..., traitCollection: ...)`
    static func checkInDisabledRoundIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkInDisabledRoundIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CheckInRoundIcon", bundle: ..., traitCollection: ...)`
    static func checkInRoundIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkInRoundIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CheckMarkIcon", bundle: ..., traitCollection: ...)`
    static func checkMarkIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkMarkIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CircularActivityIndicator", bundle: ..., traitCollection: ...)`
    static func circularActivityIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circularActivityIndicator, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CloseIcon", bundle: ..., traitCollection: ...)`
    static func closeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CurrentLocationIcon", bundle: ..., traitCollection: ...)`
    static func currentLocationIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.currentLocationIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "DrawerHandle", bundle: ..., traitCollection: ...)`
    static func drawerHandle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drawerHandle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "DrawerTop", bundle: ..., traitCollection: ...)`
    static func drawerTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drawerTop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "DropDownArrowDark", bundle: ..., traitCollection: ...)`
    static func dropDownArrowDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dropDownArrowDark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "DropDownArrowLight", bundle: ..., traitCollection: ...)`
    static func dropDownArrowLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dropDownArrowLight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "EditIconFilled", bundle: ..., traitCollection: ...)`
    static func editIconFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editIconFilled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "EditIconFilledLarge", bundle: ..., traitCollection: ...)`
    static func editIconFilledLarge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editIconFilledLarge, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "EditIconOutlined", bundle: ..., traitCollection: ...)`
    static func editIconOutlined(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editIconOutlined, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ExclamationCircularIcon", bundle: ..., traitCollection: ...)`
    static func exclamationCircularIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exclamationCircularIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "FireIconFilled", bundle: ..., traitCollection: ...)`
    static func fireIconFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fireIconFilled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "FlashAutoIcon", bundle: ..., traitCollection: ...)`
    static func flashAutoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flashAutoIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "FlashOffIcon", bundle: ..., traitCollection: ...)`
    static func flashOffIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flashOffIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "FlashOnIcon", bundle: ..., traitCollection: ...)`
    static func flashOnIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flashOnIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "FocusVisualCue", bundle: ..., traitCollection: ...)`
    static func focusVisualCue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.focusVisualCue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ForwardArrowIcon", bundle: ..., traitCollection: ...)`
    static func forwardArrowIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forwardArrowIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "FriendsRoundIcon", bundle: ..., traitCollection: ...)`
    static func friendsRoundIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friendsRoundIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "GearIcon", bundle: ..., traitCollection: ...)`
    static func gearIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gearIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "GymMapMarker", bundle: ..., traitCollection: ...)`
    static func gymMapMarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gymMapMarker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "InfoIcon", bundle: ..., traitCollection: ...)`
    static func infoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.infoIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LocationIcon", bundle: ..., traitCollection: ...)`
    static func locationIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LocationRoundIcon", bundle: ..., traitCollection: ...)`
    static func locationRoundIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationRoundIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapControlsBackground", bundle: ..., traitCollection: ...)`
    static func mapControlsBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapControlsBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerBar2D", bundle: ..., traitCollection: ...)`
    static func mapMarkerBar2D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerBar2D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerBar3D", bundle: ..., traitCollection: ...)`
    static func mapMarkerBar3D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerBar3D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerBarShadow3D", bundle: ..., traitCollection: ...)`
    static func mapMarkerBarShadow3D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerBarShadow3D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerFlameDead", bundle: ..., traitCollection: ...)`
    static func mapMarkerFlameDead(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerFlameDead, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerFlameDecentScene", bundle: ..., traitCollection: ...)`
    static func mapMarkerFlameDecentScene(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerFlameDecentScene, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerFlameLit", bundle: ..., traitCollection: ...)`
    static func mapMarkerFlameLit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerFlameLit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerFlamePrettyChill", bundle: ..., traitCollection: ...)`
    static func mapMarkerFlamePrettyChill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerFlamePrettyChill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerFlameVeryLively", bundle: ..., traitCollection: ...)`
    static func mapMarkerFlameVeryLively(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerFlameVeryLively, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerGlassDead", bundle: ..., traitCollection: ...)`
    static func mapMarkerGlassDead(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerGlassDead, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerGlassDecentScene", bundle: ..., traitCollection: ...)`
    static func mapMarkerGlassDecentScene(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerGlassDecentScene, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerGlassLit", bundle: ..., traitCollection: ...)`
    static func mapMarkerGlassLit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerGlassLit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerGlassPrettyChill", bundle: ..., traitCollection: ...)`
    static func mapMarkerGlassPrettyChill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerGlassPrettyChill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerGlassVeryLively", bundle: ..., traitCollection: ...)`
    static func mapMarkerGlassVeryLively(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerGlassVeryLively, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerGym2D", bundle: ..., traitCollection: ...)`
    static func mapMarkerGym2D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerGym2D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerGym3D", bundle: ..., traitCollection: ...)`
    static func mapMarkerGym3D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerGym3D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerGymShadow3D", bundle: ..., traitCollection: ...)`
    static func mapMarkerGymShadow3D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerGymShadow3D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerMedia2D", bundle: ..., traitCollection: ...)`
    static func mapMarkerMedia2D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerMedia2D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerMedia3D", bundle: ..., traitCollection: ...)`
    static func mapMarkerMedia3D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerMedia3D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerMediaShadow3D", bundle: ..., traitCollection: ...)`
    static func mapMarkerMediaShadow3D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerMediaShadow3D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerMovies2D", bundle: ..., traitCollection: ...)`
    static func mapMarkerMovies2D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerMovies2D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerMovies3D", bundle: ..., traitCollection: ...)`
    static func mapMarkerMovies3D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerMovies3D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerMoviesShadow3D", bundle: ..., traitCollection: ...)`
    static func mapMarkerMoviesShadow3D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerMoviesShadow3D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerOutdoorRec2D", bundle: ..., traitCollection: ...)`
    static func mapMarkerOutdoorRec2D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerOutdoorRec2D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerOutdoorRec3D", bundle: ..., traitCollection: ...)`
    static func mapMarkerOutdoorRec3D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerOutdoorRec3D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerOutdoorRecShadow3D", bundle: ..., traitCollection: ...)`
    static func mapMarkerOutdoorRecShadow3D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerOutdoorRecShadow3D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerOvalDead", bundle: ..., traitCollection: ...)`
    static func mapMarkerOvalDead(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerOvalDead, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerOvalDecentScene", bundle: ..., traitCollection: ...)`
    static func mapMarkerOvalDecentScene(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerOvalDecentScene, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerOvalLit", bundle: ..., traitCollection: ...)`
    static func mapMarkerOvalLit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerOvalLit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerOvalPrettyChill", bundle: ..., traitCollection: ...)`
    static func mapMarkerOvalPrettyChill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerOvalPrettyChill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerOvalVeryLively", bundle: ..., traitCollection: ...)`
    static func mapMarkerOvalVeryLively(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerOvalVeryLively, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerRestaurant2D", bundle: ..., traitCollection: ...)`
    static func mapMarkerRestaurant2D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerRestaurant2D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerRestaurant3D", bundle: ..., traitCollection: ...)`
    static func mapMarkerRestaurant3D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerRestaurant3D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapMarkerRestaurantShadow3D", bundle: ..., traitCollection: ...)`
    static func mapMarkerRestaurantShadow3D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarkerRestaurantShadow3D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapPopupLocationIndicator", bundle: ..., traitCollection: ...)`
    static func mapPopupLocationIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapPopupLocationIndicator, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapTabIcon", bundle: ..., traitCollection: ...)`
    static func mapTabIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapTabIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapTabIconSelected", bundle: ..., traitCollection: ...)`
    static func mapTabIconSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapTabIconSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapsFlag2D", bundle: ..., traitCollection: ...)`
    static func mapsFlag2D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapsFlag2D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapsFlag3D", bundle: ..., traitCollection: ...)`
    static func mapsFlag3D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapsFlag3D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapsMarkerInfoBattery", bundle: ..., traitCollection: ...)`
    static func mapsMarkerInfoBattery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapsMarkerInfoBattery, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapsMarkerInfoBottom", bundle: ..., traitCollection: ...)`
    static func mapsMarkerInfoBottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapsMarkerInfoBottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapsMarkerInfoCallout", bundle: ..., traitCollection: ...)`
    static func mapsMarkerInfoCallout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapsMarkerInfoCallout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapsMarkerInfoLocation", bundle: ..., traitCollection: ...)`
    static func mapsMarkerInfoLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapsMarkerInfoLocation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapsMarkerInfoMessage", bundle: ..., traitCollection: ...)`
    static func mapsMarkerInfoMessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapsMarkerInfoMessage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapsMarkerInfoTop", bundle: ..., traitCollection: ...)`
    static func mapsMarkerInfoTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapsMarkerInfoTop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapsMarkerInfoVerticalDivider", bundle: ..., traitCollection: ...)`
    static func mapsMarkerInfoVerticalDivider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapsMarkerInfoVerticalDivider, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapsMarkerPOIBackground3D", bundle: ..., traitCollection: ...)`
    static func mapsMarkerPOIBackground3D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapsMarkerPOIBackground3D, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MapsPOI3DMarkerBackground", bundle: ..., traitCollection: ...)`
    static func mapsPOI3DMarkerBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapsPOI3DMarkerBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MeetingIcon", bundle: ..., traitCollection: ...)`
    static func meetingIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meetingIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagesBubble", bundle: ..., traitCollection: ...)`
    static func messagesBubble(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagesBubble, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagesCellContentContainerBackground", bundle: ..., traitCollection: ...)`
    static func messagesCellContentContainerBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagesCellContentContainerBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagesChat", bundle: ..., traitCollection: ...)`
    static func messagesChat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagesChat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagesEmptyHeart", bundle: ..., traitCollection: ...)`
    static func messagesEmptyHeart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagesEmptyHeart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagesGroupChat", bundle: ..., traitCollection: ...)`
    static func messagesGroupChat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagesGroupChat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagesHide", bundle: ..., traitCollection: ...)`
    static func messagesHide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagesHide, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagesMark", bundle: ..., traitCollection: ...)`
    static func messagesMark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagesMark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagesMedia", bundle: ..., traitCollection: ...)`
    static func messagesMedia(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagesMedia, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagesMediaSelected", bundle: ..., traitCollection: ...)`
    static func messagesMediaSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagesMediaSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagesMute", bundle: ..., traitCollection: ...)`
    static func messagesMute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagesMute, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagesSend", bundle: ..., traitCollection: ...)`
    static func messagesSend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagesSend, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagesUnreadIndicator", bundle: ..., traitCollection: ...)`
    static func messagesUnreadIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagesUnreadIndicator, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagingCameraIcon", bundle: ..., traitCollection: ...)`
    static func messagingCameraIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagingCameraIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagingEmojiIcon", bundle: ..., traitCollection: ...)`
    static func messagingEmojiIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagingEmojiIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagingGalleryIcon", bundle: ..., traitCollection: ...)`
    static func messagingGalleryIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagingGalleryIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagingGallerySharingSelectedBadge", bundle: ..., traitCollection: ...)`
    static func messagingGallerySharingSelectedBadge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagingGallerySharingSelectedBadge, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagingLocationIcon", bundle: ..., traitCollection: ...)`
    static func messagingLocationIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagingLocationIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagingPollIcon", bundle: ..., traitCollection: ...)`
    static func messagingPollIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagingPollIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagingTabIcon", bundle: ..., traitCollection: ...)`
    static func messagingTabIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagingTabIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagingTabIconSelected", bundle: ..., traitCollection: ...)`
    static func messagingTabIconSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagingTabIconSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MessagingVoiceIcon", bundle: ..., traitCollection: ...)`
    static func messagingVoiceIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagingVoiceIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MoviesMapMarker", bundle: ..., traitCollection: ...)`
    static func moviesMapMarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moviesMapMarker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MyLocationMarker", bundle: ..., traitCollection: ...)`
    static func myLocationMarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myLocationMarker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NavigateRoundIcon", bundle: ..., traitCollection: ...)`
    static func navigateRoundIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigateRoundIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NavigationBackArrow", bundle: ..., traitCollection: ...)`
    static func navigationBackArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationBackArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NavigationMenuIcon", bundle: ..., traitCollection: ...)`
    static func navigationMenuIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationMenuIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NewMeetingBackground", bundle: ..., traitCollection: ...)`
    static func newMeetingBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newMeetingBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NewMeetingIcon", bundle: ..., traitCollection: ...)`
    static func newMeetingIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newMeetingIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NewMessageIcon", bundle: ..., traitCollection: ...)`
    static func newMessageIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newMessageIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "OutdoorRecMapMarker", bundle: ..., traitCollection: ...)`
    static func outdoorRecMapMarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outdoorRecMapMarker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "POINavLargeIcon", bundle: ..., traitCollection: ...)`
    static func pOINavLargeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pOINavLargeIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "POINavMapMarker", bundle: ..., traitCollection: ...)`
    static func pOINavMapMarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pOINavMapMarker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PaperPlaneIcon", bundle: ..., traitCollection: ...)`
    static func paperPlaneIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paperPlaneIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PhoneRoundIcon", bundle: ..., traitCollection: ...)`
    static func phoneRoundIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phoneRoundIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PlaceholderImage", bundle: ..., traitCollection: ...)`
    static func placeholderImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholderImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ProfileTabIcon", bundle: ..., traitCollection: ...)`
    static func profileTabIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileTabIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ProfileTabIconSelected", bundle: ..., traitCollection: ...)`
    static func profileTabIconSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileTabIconSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PromoBubbles", bundle: ..., traitCollection: ...)`
    static func promoBubbles(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promoBubbles, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PromoEvents", bundle: ..., traitCollection: ...)`
    static func promoEvents(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promoEvents, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PromoGalleries", bundle: ..., traitCollection: ...)`
    static func promoGalleries(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promoGalleries, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PromoMessages", bundle: ..., traitCollection: ...)`
    static func promoMessages(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promoMessages, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PromoPOIs", bundle: ..., traitCollection: ...)`
    static func promoPOIs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promoPOIs, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "RatingFlameEmpty", bundle: ..., traitCollection: ...)`
    static func ratingFlameEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ratingFlameEmpty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "RatingFlameFilled", bundle: ..., traitCollection: ...)`
    static func ratingFlameFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ratingFlameFilled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "RatingFlameHalf", bundle: ..., traitCollection: ...)`
    static func ratingFlameHalf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ratingFlameHalf, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "RedXCircle", bundle: ..., traitCollection: ...)`
    static func redXCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redXCircle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "RestaurantMapMarker", bundle: ..., traitCollection: ...)`
    static func restaurantMapMarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.restaurantMapMarker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "RightArrowIcon", bundle: ..., traitCollection: ...)`
    static func rightArrowIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrowIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "RoundLocationIcon", bundle: ..., traitCollection: ...)`
    static func roundLocationIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.roundLocationIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Sabine", bundle: ..., traitCollection: ...)`
    static func sabine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sabine, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SearchFiltersIcon", bundle: ..., traitCollection: ...)`
    static func searchFiltersIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchFiltersIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SearchTabIcon", bundle: ..., traitCollection: ...)`
    static func searchTabIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchTabIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SearchTabIconSelected", bundle: ..., traitCollection: ...)`
    static func searchTabIconSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchTabIconSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SettingOptionDisclose", bundle: ..., traitCollection: ...)`
    static func settingOptionDisclose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingOptionDisclose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SettingOptionSwitchOff", bundle: ..., traitCollection: ...)`
    static func settingOptionSwitchOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingOptionSwitchOff, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SettingOptionSwitchOn", bundle: ..., traitCollection: ...)`
    static func settingOptionSwitchOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingOptionSwitchOn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Submit Button", bundle: ..., traitCollection: ...)`
    static func submitButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.submitButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SwitchCameraIcon", bundle: ..., traitCollection: ...)`
    static func switchCameraIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switchCameraIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ThreeDimensionProjection", bundle: ..., traitCollection: ...)`
    static func threeDimensionProjection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.threeDimensionProjection, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ThunderBuddies", bundle: ..., traitCollection: ...)`
    static func thunderBuddies(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thunderBuddies, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Tony", bundle: ..., traitCollection: ...)`
    static func tony(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tony, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TwoDimensionProjection", bundle: ..., traitCollection: ...)`
    static func twoDimensionProjection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twoDimensionProjection, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WarningIcon", bundle: ..., traitCollection: ...)`
    static func warningIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.warningIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "addPhotoInfo", bundle: ..., traitCollection: ...)`
    static func addPhotoInfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addPhotoInfo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "addVideoInfo", bundle: ..., traitCollection: ...)`
    static func addVideoInfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addVideoInfo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "amusement", bundle: ..., traitCollection: ...)`
    static func amusement(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amusement, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "amusement_bw", bundle: ..., traitCollection: ...)`
    static func amusement_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amusement_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "answeredIcon", bundle: ..., traitCollection: ...)`
    static func answeredIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.answeredIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "appleTouchIcon", bundle: ..., traitCollection: ...)`
    static func appleTouchIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appleTouchIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrowPoll", bundle: ..., traitCollection: ...)`
    static func arrowPoll(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowPoll, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrowSmall", bundle: ..., traitCollection: ...)`
    static func arrowSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "audioBackground", bundle: ..., traitCollection: ...)`
    static func audioBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.audioBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "audioRecordBackground", bundle: ..., traitCollection: ...)`
    static func audioRecordBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.audioRecordBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "audioShadow", bundle: ..., traitCollection: ...)`
    static func audioShadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.audioShadow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backarrow", bundle: ..., traitCollection: ...)`
    static func backarrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backarrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bar", bundle: ..., traitCollection: ...)`
    static func bar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "barLit", bundle: ..., traitCollection: ...)`
    static func barLit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barLit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "barLit2", bundle: ..., traitCollection: ...)`
    static func barLit2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barLit2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "barLit_high", bundle: ..., traitCollection: ...)`
    static func barLit_high(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barLit_high, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "barLit_low", bundle: ..., traitCollection: ...)`
    static func barLit_low(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barLit_low, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "barLit_mid", bundle: ..., traitCollection: ...)`
    static func barLit_mid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barLit_mid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "barLit_normal", bundle: ..., traitCollection: ...)`
    static func barLit_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barLit_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bar_lit_cold", bundle: ..., traitCollection: ...)`
    static func bar_lit_cold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar_lit_cold, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bar_lit_hot", bundle: ..., traitCollection: ...)`
    static func bar_lit_hot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar_lit_hot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bar_lit_none", bundle: ..., traitCollection: ...)`
    static func bar_lit_none(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar_lit_none, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bar_lit_warm", bundle: ..., traitCollection: ...)`
    static func bar_lit_warm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar_lit_warm, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bars", bundle: ..., traitCollection: ...)`
    static func bars(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bars, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bars_bw", bundle: ..., traitCollection: ...)`
    static func bars_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bars_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "blueArrow", bundle: ..., traitCollection: ...)`
    static func blueArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blueArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "breakfast", bundle: ..., traitCollection: ...)`
    static func breakfast(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.breakfast, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "breakfast_bw", bundle: ..., traitCollection: ...)`
    static func breakfast_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.breakfast_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bubbleDetail", bundle: ..., traitCollection: ...)`
    static func bubbleDetail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bubbleDetail, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "burgers", bundle: ..., traitCollection: ...)`
    static func burgers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.burgers, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "burgers_bw", bundle: ..., traitCollection: ...)`
    static func burgers_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.burgers_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "callIcon", bundle: ..., traitCollection: ...)`
    static func callIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.callIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "callIconSmall", bundle: ..., traitCollection: ...)`
    static func callIconSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.callIconSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cameraIconPoll", bundle: ..., traitCollection: ...)`
    static func cameraIconPoll(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraIconPoll, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chinese", bundle: ..., traitCollection: ...)`
    static func chinese(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chinese, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chinese_bw", bundle: ..., traitCollection: ...)`
    static func chinese_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chinese_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "close_x", bundle: ..., traitCollection: ...)`
    static func close_x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close_x, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "clubs", bundle: ..., traitCollection: ...)`
    static func clubs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clubs, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "clubs_bw", bundle: ..., traitCollection: ...)`
    static func clubs_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clubs_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "contactSelected", bundle: ..., traitCollection: ...)`
    static func contactSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "createGroupIcon", bundle: ..., traitCollection: ...)`
    static func createGroupIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.createGroupIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "currentLocation", bundle: ..., traitCollection: ...)`
    static func currentLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.currentLocation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "deleteContactIcon", bundle: ..., traitCollection: ...)`
    static func deleteContactIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deleteContactIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "deleteMediaIcon", bundle: ..., traitCollection: ...)`
    static func deleteMediaIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deleteMediaIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "deletePoll", bundle: ..., traitCollection: ...)`
    static func deletePoll(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deletePoll, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "drink", bundle: ..., traitCollection: ...)`
    static func drink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drink, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "drinkSelected", bundle: ..., traitCollection: ...)`
    static func drinkSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drinkSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "editMenu", bundle: ..., traitCollection: ...)`
    static func editMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editMenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "emptyOval", bundle: ..., traitCollection: ...)`
    static func emptyOval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyOval, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fill155", bundle: ..., traitCollection: ...)`
    static func fill155(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fill155, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fill182", bundle: ..., traitCollection: ...)`
    static func fill182(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fill182, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "food", bundle: ..., traitCollection: ...)`
    static func food(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "foodSelected", bundle: ..., traitCollection: ...)`
    static func foodSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.foodSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "galleryIcon", bundle: ..., traitCollection: ...)`
    static func galleryIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.galleryIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gym", bundle: ..., traitCollection: ...)`
    static func gym(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gym, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gym_bw", bundle: ..., traitCollection: ...)`
    static func gym_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gym_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "healthy", bundle: ..., traitCollection: ...)`
    static func healthy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.healthy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "healthy_bw", bundle: ..., traitCollection: ...)`
    static func healthy_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.healthy_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icDirectionsBike", bundle: ..., traitCollection: ...)`
    static func icDirectionsBike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icDirectionsBike, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icDirectionsCar", bundle: ..., traitCollection: ...)`
    static func icDirectionsCar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icDirectionsCar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icDirectionsTransit", bundle: ..., traitCollection: ...)`
    static func icDirectionsTransit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icDirectionsTransit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icDirectionsWalk", bundle: ..., traitCollection: ...)`
    static func icDirectionsWalk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icDirectionsWalk, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "indian", bundle: ..., traitCollection: ...)`
    static func indian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.indian, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "indian_bw", bundle: ..., traitCollection: ...)`
    static func indian_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.indian_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "italian", bundle: ..., traitCollection: ...)`
    static func italian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.italian, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "italian_bw", bundle: ..., traitCollection: ...)`
    static func italian_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.italian_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "japanese", bundle: ..., traitCollection: ...)`
    static func japanese(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.japanese, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "japanese_bw", bundle: ..., traitCollection: ...)`
    static func japanese_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.japanese_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "line", bundle: ..., traitCollection: ...)`
    static func line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lit_down_bg", bundle: ..., traitCollection: ...)`
    static func lit_down_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lit_down_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lit_up_bg", bundle: ..., traitCollection: ...)`
    static func lit_up_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lit_up_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "live music", bundle: ..., traitCollection: ...)`
    static func liveMusic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.liveMusic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "live music_bw", bundle: ..., traitCollection: ...)`
    static func liveMusic_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.liveMusic_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "livemusic_bw", bundle: ..., traitCollection: ...)`
    static func livemusic_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.livemusic_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "locationSharePosition", bundle: ..., traitCollection: ...)`
    static func locationSharePosition(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationSharePosition, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall", bundle: ..., traitCollection: ...)`
    static func mall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_bw", bundle: ..., traitCollection: ...)`
    static func mall_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mediaCloseIcon", bundle: ..., traitCollection: ...)`
    static func mediaCloseIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mediaCloseIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mediaLocationIcon", bundle: ..., traitCollection: ...)`
    static func mediaLocationIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mediaLocationIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mediaShareIcon", bundle: ..., traitCollection: ...)`
    static func mediaShareIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mediaShareIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mexican", bundle: ..., traitCollection: ...)`
    static func mexican(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mexican, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mexican_bw", bundle: ..., traitCollection: ...)`
    static func mexican_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mexican_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "middle_line", bundle: ..., traitCollection: ...)`
    static func middle_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.middle_line, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more_bw", bundle: ..., traitCollection: ...)`
    static func more_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "most lit", bundle: ..., traitCollection: ...)`
    static func mostLit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mostLit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "most lit_bw", bundle: ..., traitCollection: ...)`
    static func mostLit_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mostLit_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mostlit_bw", bundle: ..., traitCollection: ...)`
    static func mostlit_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mostlit_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "movies", bundle: ..., traitCollection: ...)`
    static func movies(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.movies, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "movies_bw", bundle: ..., traitCollection: ...)`
    static func movies_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.movies_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nightlife", bundle: ..., traitCollection: ...)`
    static func nightlife(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nightlife, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nightlife_bw", bundle: ..., traitCollection: ...)`
    static func nightlife_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nightlife_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "orangeFlame", bundle: ..., traitCollection: ...)`
    static func orangeFlame(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orangeFlame, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "outdoor", bundle: ..., traitCollection: ...)`
    static func outdoor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outdoor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "outdoor_bw", bundle: ..., traitCollection: ...)`
    static func outdoor_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outdoor_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "path", bundle: ..., traitCollection: ...)`
    static func path(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.path, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "photoMedia", bundle: ..., traitCollection: ...)`
    static func photoMedia(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoMedia, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pizza", bundle: ..., traitCollection: ...)`
    static func pizza(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pizza, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pizza_bw", bundle: ..., traitCollection: ...)`
    static func pizza_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pizza_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "playIcon", bundle: ..., traitCollection: ...)`
    static func playIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "playIconBig", bundle: ..., traitCollection: ...)`
    static func playIconBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playIconBig, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "playIconSmall", bundle: ..., traitCollection: ...)`
    static func playIconSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playIconSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "poiWebIcon", bundle: ..., traitCollection: ...)`
    static func poiWebIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.poiWebIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "poilocationIcon", bundle: ..., traitCollection: ...)`
    static func poilocationIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.poilocationIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "restaurants", bundle: ..., traitCollection: ...)`
    static func restaurants(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.restaurants, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "restaurants_bw", bundle: ..., traitCollection: ...)`
    static func restaurants_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.restaurants_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sandwich", bundle: ..., traitCollection: ...)`
    static func sandwich(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sandwich, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sandwich_bw", bundle: ..., traitCollection: ...)`
    static func sandwich_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sandwich_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "seafood", bundle: ..., traitCollection: ...)`
    static func seafood(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.seafood, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "seafood_bw", bundle: ..., traitCollection: ...)`
    static func seafood_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.seafood_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "selected_vote_down", bundle: ..., traitCollection: ...)`
    static func selected_vote_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected_vote_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "selected_vote_up", bundle: ..., traitCollection: ...)`
    static func selected_vote_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected_vote_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "steakhouse", bundle: ..., traitCollection: ...)`
    static func steakhouse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.steakhouse, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "steakhouse_bw", bundle: ..., traitCollection: ...)`
    static func steakhouse_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.steakhouse_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sushi", bundle: ..., traitCollection: ...)`
    static func sushi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sushi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sushi_bw", bundle: ..., traitCollection: ...)`
    static func sushi_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sushi_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "thai", bundle: ..., traitCollection: ...)`
    static func thai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thai, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "thai_bw", bundle: ..., traitCollection: ...)`
    static func thai_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thai_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "theater", bundle: ..., traitCollection: ...)`
    static func theater(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theater, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "theater_bw", bundle: ..., traitCollection: ...)`
    static func theater_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theater_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "thumb_down", bundle: ..., traitCollection: ...)`
    static func thumb_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumb_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "thumb_up", bundle: ..., traitCollection: ...)`
    static func thumb_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumb_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unasweredIcon", bundle: ..., traitCollection: ...)`
    static func unasweredIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unasweredIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unselect_vote_up", bundle: ..., traitCollection: ...)`
    static func unselect_vote_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselect_vote_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unselected_vote_down", bundle: ..., traitCollection: ...)`
    static func unselected_vote_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselected_vote_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vegetarian", bundle: ..., traitCollection: ...)`
    static func vegetarian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vegetarian, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vegetarian_bw", bundle: ..., traitCollection: ...)`
    static func vegetarian_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vegetarian_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "videoMedia", bundle: ..., traitCollection: ...)`
    static func videoMedia(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videoMedia, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vietnamese", bundle: ..., traitCollection: ...)`
    static func vietnamese(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vietnamese, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vietnamese_bw", bundle: ..., traitCollection: ...)`
    static func vietnamese_bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vietnamese_bw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vote_panel", bundle: ..., traitCollection: ...)`
    static func vote_panel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vote_panel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wave", bundle: ..., traitCollection: ...)`
    static func wave(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wave, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 50 nibs.
  struct nib {
    /// Nib `ARFormTextField`.
    static let aRFormTextField = _R.nib._ARFormTextField()
    /// Nib `ARMapOther3DMarkerView`.
    static let aRMapOther3DMarkerView = _R.nib._ARMapOther3DMarkerView()
    /// Nib `ARMapPointOfInterest3DMarkerView`.
    static let aRMapPointOfInterest3DMarkerView = _R.nib._ARMapPointOfInterest3DMarkerView()
    /// Nib `AddBubbleMembers`.
    static let addBubbleMembers = _R.nib._AddBubbleMembers()
    /// Nib `BubbleListCell`.
    static let bubbleListCell = _R.nib._BubbleListCell()
    /// Nib `BubbleMemberCell`.
    static let bubbleMemberCell = _R.nib._BubbleMemberCell()
    /// Nib `CameraMembers`.
    static let cameraMembers = _R.nib._CameraMembers()
    /// Nib `CapsuleView`.
    static let capsuleView = _R.nib._CapsuleView()
    /// Nib `CheckInCell`.
    static let checkInCell = _R.nib._CheckInCell()
    /// Nib `CommentSectionHeader`.
    static let commentSectionHeader = _R.nib._CommentSectionHeader()
    /// Nib `ConfirmBubble`.
    static let confirmBubble = _R.nib._ConfirmBubble()
    /// Nib `CreateBubble`.
    static let createBubble = _R.nib._CreateBubble()
    /// Nib `FeedSectionHeader`.
    static let feedSectionHeader = _R.nib._FeedSectionHeader()
    /// Nib `ImageView`.
    static let imageView = _R.nib._ImageView()
    /// Nib `LandmarkCell`.
    static let landmarkCell = _R.nib._LandmarkCell()
    /// Nib `Login`.
    static let login = _R.nib._Login()
    /// Nib `MapsBubbleBar`.
    static let mapsBubbleBar = _R.nib._MapsBubbleBar()
    /// Nib `MapsFlag2D`.
    static let mapsFlag2D = _R.nib._MapsFlag2D()
    /// Nib `MapsFlag3D`.
    static let mapsFlag3D = _R.nib._MapsFlag3D()
    /// Nib `MapsMemberMarkerView`.
    static let mapsMemberMarkerView = _R.nib._MapsMemberMarkerView()
    /// Nib `MeetingRSVPCardView`.
    static let meetingRSVPCardView = _R.nib._MeetingRSVPCardView()
    /// Nib `MeetingRSVPView`.
    static let meetingRSVPView = _R.nib._MeetingRSVPView()
    /// Nib `MessagesAudioPreviewView`.
    static let messagesAudioPreviewView = _R.nib._MessagesAudioPreviewView()
    /// Nib `MessagesContactCell`.
    static let messagesContactCell = _R.nib._MessagesContactCell()
    /// Nib `MessagingAddContacts`.
    static let messagingAddContacts = _R.nib._MessagingAddContacts()
    /// Nib `MessagingPollPreview`.
    static let messagingPollPreview = _R.nib._MessagingPollPreview()
    /// Nib `MessagingPreviewTableViewCell`.
    static let messagingPreviewTableViewCell = _R.nib._MessagingPreviewTableViewCell()
    /// Nib `NearbyLocationCell`.
    static let nearbyLocationCell = _R.nib._NearbyLocationCell()
    /// Nib `PhoneNumber`.
    static let phoneNumber = _R.nib._PhoneNumber()
    /// Nib `PhonePickerCell`.
    static let phonePickerCell = _R.nib._PhonePickerCell()
    /// Nib `PhonePickerPopover`.
    static let phonePickerPopover = _R.nib._PhonePickerPopover()
    /// Nib `ProfileActionsCell`.
    static let profileActionsCell = _R.nib._ProfileActionsCell()
    /// Nib `ProfileInfoCell`.
    static let profileInfoCell = _R.nib._ProfileInfoCell()
    /// Nib `ProfileSectionHeader`.
    static let profileSectionHeader = _R.nib._ProfileSectionHeader()
    /// Nib `PromoView`.
    static let promoView = _R.nib._PromoView()
    /// Nib `RSVPCollectionViewCell`.
    static let rSVPCollectionViewCell = _R.nib._RSVPCollectionViewCell()
    /// Nib `ResetPasswordEmail`.
    static let resetPasswordEmail = _R.nib._ResetPasswordEmail()
    /// Nib `ResetPasswordNewPass`.
    static let resetPasswordNewPass = _R.nib._ResetPasswordNewPass()
    /// Nib `ResetPasswordVerify`.
    static let resetPasswordVerify = _R.nib._ResetPasswordVerify()
    /// Nib `SearchBarCell`.
    static let searchBarCell = _R.nib._SearchBarCell()
    /// Nib `SearchCategoriesCell`.
    static let searchCategoriesCell = _R.nib._SearchCategoriesCell()
    /// Nib `SearchFilterOptionView`.
    static let searchFilterOptionView = _R.nib._SearchFilterOptionView()
    /// Nib `SearchSectionHeader`.
    static let searchSectionHeader = _R.nib._SearchSectionHeader()
    /// Nib `SettingOptionCell`.
    static let settingOptionCell = _R.nib._SettingOptionCell()
    /// Nib `SignupCongrats`.
    static let signupCongrats = _R.nib._SignupCongrats()
    /// Nib `SignupForm`.
    static let signupForm = _R.nib._SignupForm()
    /// Nib `SignupPermissions`.
    static let signupPermissions = _R.nib._SignupPermissions()
    /// Nib `SignupProfilePicture`.
    static let signupProfilePicture = _R.nib._SignupProfilePicture()
    /// Nib `SimpleSectionHeader`.
    static let simpleSectionHeader = _R.nib._SimpleSectionHeader()
    /// Nib `VerifyCode`.
    static let verifyCode = _R.nib._VerifyCode()
    
    /// `UINib(name: "ARFormTextField", in: bundle)`
    static func aRFormTextField(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aRFormTextField)
    }
    
    /// `UINib(name: "ARMapOther3DMarkerView", in: bundle)`
    static func aRMapOther3DMarkerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aRMapOther3DMarkerView)
    }
    
    /// `UINib(name: "ARMapPointOfInterest3DMarkerView", in: bundle)`
    static func aRMapPointOfInterest3DMarkerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aRMapPointOfInterest3DMarkerView)
    }
    
    /// `UINib(name: "AddBubbleMembers", in: bundle)`
    static func addBubbleMembers(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addBubbleMembers)
    }
    
    /// `UINib(name: "BubbleListCell", in: bundle)`
    static func bubbleListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bubbleListCell)
    }
    
    /// `UINib(name: "BubbleMemberCell", in: bundle)`
    static func bubbleMemberCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bubbleMemberCell)
    }
    
    /// `UINib(name: "CameraMembers", in: bundle)`
    static func cameraMembers(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cameraMembers)
    }
    
    /// `UINib(name: "CapsuleView", in: bundle)`
    static func capsuleView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.capsuleView)
    }
    
    /// `UINib(name: "CheckInCell", in: bundle)`
    static func checkInCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.checkInCell)
    }
    
    /// `UINib(name: "CommentSectionHeader", in: bundle)`
    static func commentSectionHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentSectionHeader)
    }
    
    /// `UINib(name: "ConfirmBubble", in: bundle)`
    static func confirmBubble(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.confirmBubble)
    }
    
    /// `UINib(name: "CreateBubble", in: bundle)`
    static func createBubble(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.createBubble)
    }
    
    /// `UINib(name: "FeedSectionHeader", in: bundle)`
    static func feedSectionHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.feedSectionHeader)
    }
    
    /// `UINib(name: "ImageView", in: bundle)`
    static func imageView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageView)
    }
    
    /// `UINib(name: "LandmarkCell", in: bundle)`
    static func landmarkCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.landmarkCell)
    }
    
    /// `UINib(name: "Login", in: bundle)`
    static func login(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.login)
    }
    
    /// `UINib(name: "MapsBubbleBar", in: bundle)`
    static func mapsBubbleBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mapsBubbleBar)
    }
    
    /// `UINib(name: "MapsFlag2D", in: bundle)`
    static func mapsFlag2D(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mapsFlag2D)
    }
    
    /// `UINib(name: "MapsFlag3D", in: bundle)`
    static func mapsFlag3D(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mapsFlag3D)
    }
    
    /// `UINib(name: "MapsMemberMarkerView", in: bundle)`
    static func mapsMemberMarkerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mapsMemberMarkerView)
    }
    
    /// `UINib(name: "MeetingRSVPCardView", in: bundle)`
    static func meetingRSVPCardView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.meetingRSVPCardView)
    }
    
    /// `UINib(name: "MeetingRSVPView", in: bundle)`
    static func meetingRSVPView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.meetingRSVPView)
    }
    
    /// `UINib(name: "MessagesAudioPreviewView", in: bundle)`
    static func messagesAudioPreviewView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messagesAudioPreviewView)
    }
    
    /// `UINib(name: "MessagesContactCell", in: bundle)`
    static func messagesContactCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messagesContactCell)
    }
    
    /// `UINib(name: "MessagingAddContacts", in: bundle)`
    static func messagingAddContacts(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messagingAddContacts)
    }
    
    /// `UINib(name: "MessagingPollPreview", in: bundle)`
    static func messagingPollPreview(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messagingPollPreview)
    }
    
    /// `UINib(name: "MessagingPreviewTableViewCell", in: bundle)`
    static func messagingPreviewTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messagingPreviewTableViewCell)
    }
    
    /// `UINib(name: "NearbyLocationCell", in: bundle)`
    static func nearbyLocationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.nearbyLocationCell)
    }
    
    /// `UINib(name: "PhoneNumber", in: bundle)`
    static func phoneNumber(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.phoneNumber)
    }
    
    /// `UINib(name: "PhonePickerCell", in: bundle)`
    static func phonePickerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.phonePickerCell)
    }
    
    /// `UINib(name: "PhonePickerPopover", in: bundle)`
    static func phonePickerPopover(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.phonePickerPopover)
    }
    
    /// `UINib(name: "ProfileActionsCell", in: bundle)`
    static func profileActionsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileActionsCell)
    }
    
    /// `UINib(name: "ProfileInfoCell", in: bundle)`
    static func profileInfoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileInfoCell)
    }
    
    /// `UINib(name: "ProfileSectionHeader", in: bundle)`
    static func profileSectionHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileSectionHeader)
    }
    
    /// `UINib(name: "PromoView", in: bundle)`
    static func promoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.promoView)
    }
    
    /// `UINib(name: "RSVPCollectionViewCell", in: bundle)`
    static func rSVPCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rSVPCollectionViewCell)
    }
    
    /// `UINib(name: "ResetPasswordEmail", in: bundle)`
    static func resetPasswordEmail(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.resetPasswordEmail)
    }
    
    /// `UINib(name: "ResetPasswordNewPass", in: bundle)`
    static func resetPasswordNewPass(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.resetPasswordNewPass)
    }
    
    /// `UINib(name: "ResetPasswordVerify", in: bundle)`
    static func resetPasswordVerify(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.resetPasswordVerify)
    }
    
    /// `UINib(name: "SearchBarCell", in: bundle)`
    static func searchBarCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchBarCell)
    }
    
    /// `UINib(name: "SearchCategoriesCell", in: bundle)`
    static func searchCategoriesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchCategoriesCell)
    }
    
    /// `UINib(name: "SearchFilterOptionView", in: bundle)`
    static func searchFilterOptionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchFilterOptionView)
    }
    
    /// `UINib(name: "SearchSectionHeader", in: bundle)`
    static func searchSectionHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchSectionHeader)
    }
    
    /// `UINib(name: "SettingOptionCell", in: bundle)`
    static func settingOptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingOptionCell)
    }
    
    /// `UINib(name: "SignupCongrats", in: bundle)`
    static func signupCongrats(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signupCongrats)
    }
    
    /// `UINib(name: "SignupForm", in: bundle)`
    static func signupForm(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signupForm)
    }
    
    /// `UINib(name: "SignupPermissions", in: bundle)`
    static func signupPermissions(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signupPermissions)
    }
    
    /// `UINib(name: "SignupProfilePicture", in: bundle)`
    static func signupProfilePicture(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signupProfilePicture)
    }
    
    /// `UINib(name: "SimpleSectionHeader", in: bundle)`
    static func simpleSectionHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.simpleSectionHeader)
    }
    
    /// `UINib(name: "VerifyCode", in: bundle)`
    static func verifyCode(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.verifyCode)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 40 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `BubbleListCell`.
    static let bubbleListCell: Rswift.ReuseIdentifier<BubbleListCell> = Rswift.ReuseIdentifier(identifier: "BubbleListCell")
    /// Reuse identifier `BubbleMemberCell`.
    static let bubbleMemberCell: Rswift.ReuseIdentifier<BubbleMemberCell> = Rswift.ReuseIdentifier(identifier: "BubbleMemberCell")
    /// Reuse identifier `CheckInCell`.
    static let checkInCell: Rswift.ReuseIdentifier<CheckInCell> = Rswift.ReuseIdentifier(identifier: "CheckInCell")
    /// Reuse identifier `EmptyPlaceholder`.
    static let emptyPlaceholder: Rswift.ReuseIdentifier<MessagingEmptyInboxTableViewCell> = Rswift.ReuseIdentifier(identifier: "EmptyPlaceholder")
    /// Reuse identifier `LandmarkCell`.
    static let landmarkCell: Rswift.ReuseIdentifier<LandmarkCell> = Rswift.ReuseIdentifier(identifier: "LandmarkCell")
    /// Reuse identifier `MessageInboxCell`.
    static let messageInboxCell: Rswift.ReuseIdentifier<MessagingInboxTableViewCell> = Rswift.ReuseIdentifier(identifier: "MessageInboxCell")
    /// Reuse identifier `MessagesContactCell`.
    static let messagesContactCell: Rswift.ReuseIdentifier<MessagesContactCell> = Rswift.ReuseIdentifier(identifier: "MessagesContactCell")
    /// Reuse identifier `MessagesGallerySharingCell`.
    static let messagesGallerySharingCell: Rswift.ReuseIdentifier<MessagesGallerySharingCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MessagesGallerySharingCell")
    /// Reuse identifier `MessagesLocationShareCell`.
    static let messagesLocationShareCell: Rswift.ReuseIdentifier<MessagesLocationShareCell> = Rswift.ReuseIdentifier(identifier: "MessagesLocationShareCell")
    /// Reuse identifier `MessagesMediaCollectionViewCell`.
    static let messagesMediaCollectionViewCell: Rswift.ReuseIdentifier<MessagesMediaCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MessagesMediaCollectionViewCell")
    /// Reuse identifier `MessagingAddContactTTableViewCell`.
    static let messagingAddContactTTableViewCell: Rswift.ReuseIdentifier<MessagingAddContactTTableViewCell> = Rswift.ReuseIdentifier(identifier: "MessagingAddContactTTableViewCell")
    /// Reuse identifier `MessagingAudioTableViewCell`.
    static let messagingAudioTableViewCell: Rswift.ReuseIdentifier<MessagingAudioTableViewCell> = Rswift.ReuseIdentifier(identifier: "MessagingAudioTableViewCell")
    /// Reuse identifier `MessagingHeaderTableViewCell`.
    static let messagingHeaderTableViewCell: Rswift.ReuseIdentifier<MessagingHeaderTableViewCell> = Rswift.ReuseIdentifier(identifier: "MessagingHeaderTableViewCell")
    /// Reuse identifier `MessagingLocationTableViewCell`.
    static let messagingLocationTableViewCell: Rswift.ReuseIdentifier<MessagingLocationTableViewCell> = Rswift.ReuseIdentifier(identifier: "MessagingLocationTableViewCell")
    /// Reuse identifier `MessagingMediaItemCollectionViewCell`.
    static let messagingMediaItemCollectionViewCell: Rswift.ReuseIdentifier<MessagingMediaItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MessagingMediaItemCollectionViewCell")
    /// Reuse identifier `MessagingMediaTableViewCell`.
    static let messagingMediaTableViewCell: Rswift.ReuseIdentifier<MessagingMediaTableViewCell> = Rswift.ReuseIdentifier(identifier: "MessagingMediaTableViewCell")
    /// Reuse identifier `MessagingNewPollChoiceTableViewCell`.
    static let messagingNewPollChoiceTableViewCell: Rswift.ReuseIdentifier<MessagingNewPollChoiceTableViewCell> = Rswift.ReuseIdentifier(identifier: "MessagingNewPollChoiceTableViewCell")
    /// Reuse identifier `MessagingPollChoiceTableViewCell`.
    static let messagingPollChoiceTableViewCell: Rswift.ReuseIdentifier<MessagingPollChoiceTableViewCell> = Rswift.ReuseIdentifier(identifier: "MessagingPollChoiceTableViewCell")
    /// Reuse identifier `MessagingPollTableViewCell`.
    static let messagingPollTableViewCell: Rswift.ReuseIdentifier<MessagingPollTableViewCell> = Rswift.ReuseIdentifier(identifier: "MessagingPollTableViewCell")
    /// Reuse identifier `MessagingPreviewTableViewCell`.
    static let messagingPreviewTableViewCell: Rswift.ReuseIdentifier<MessagingPreviewTableViewCell> = Rswift.ReuseIdentifier(identifier: "MessagingPreviewTableViewCell")
    /// Reuse identifier `MessagingTextTableViewCell`.
    static let messagingTextTableViewCell: Rswift.ReuseIdentifier<MessagingTextTableViewCell> = Rswift.ReuseIdentifier(identifier: "MessagingTextTableViewCell")
    /// Reuse identifier `NearbyLocationCell`.
    static let nearbyLocationCell: Rswift.ReuseIdentifier<NearbyLocationCell> = Rswift.ReuseIdentifier(identifier: "NearbyLocationCell")
    /// Reuse identifier `PhonePickerCell`.
    static let phonePickerCell: Rswift.ReuseIdentifier<PhonePickerCell> = Rswift.ReuseIdentifier(identifier: "PhonePickerCell")
    /// Reuse identifier `PollNewOptionTableViewCell`.
    static let pollNewOptionTableViewCell: Rswift.ReuseIdentifier<PollNewOptionTableViewCell> = Rswift.ReuseIdentifier(identifier: "PollNewOptionTableViewCell")
    /// Reuse identifier `PollOptionTableViewCell`.
    static let pollOptionTableViewCell: Rswift.ReuseIdentifier<PollOptionTableViewCell> = Rswift.ReuseIdentifier(identifier: "PollOptionTableViewCell")
    /// Reuse identifier `ProfileActionsCell`.
    static let profileActionsCell: Rswift.ReuseIdentifier<ProfileActionsCell> = Rswift.ReuseIdentifier(identifier: "ProfileActionsCell")
    /// Reuse identifier `ProfileInfoCell`.
    static let profileInfoCell: Rswift.ReuseIdentifier<ProfileInfoCell> = Rswift.ReuseIdentifier(identifier: "ProfileInfoCell")
    /// Reuse identifier `SearchBarCell`.
    static let searchBarCell: Rswift.ReuseIdentifier<SearchBarCell> = Rswift.ReuseIdentifier(identifier: "SearchBarCell")
    /// Reuse identifier `SearchCategoriesCell`.
    static let searchCategoriesCell: Rswift.ReuseIdentifier<SearchCategoriesCell> = Rswift.ReuseIdentifier(identifier: "SearchCategoriesCell")
    /// Reuse identifier `SettingOptionCell`.
    static let settingOptionCell: Rswift.ReuseIdentifier<SettingOptionCell> = Rswift.ReuseIdentifier(identifier: "SettingOptionCell")
    /// Reuse identifier `activityFeedCell1`.
    static let activityFeedCell1: Rswift.ReuseIdentifier<ActivityFeedCell> = Rswift.ReuseIdentifier(identifier: "activityFeedCell1")
    /// Reuse identifier `activityFeedCell2`.
    static let activityFeedCell2: Rswift.ReuseIdentifier<ActivityFeedCell> = Rswift.ReuseIdentifier(identifier: "activityFeedCell2")
    /// Reuse identifier `activityFeedCell3`.
    static let activityFeedCell3: Rswift.ReuseIdentifier<ActivityFeedCell> = Rswift.ReuseIdentifier(identifier: "activityFeedCell3")
    /// Reuse identifier `activityFeedCell4`.
    static let activityFeedCell4: Rswift.ReuseIdentifier<ActivityFeedCell> = Rswift.ReuseIdentifier(identifier: "activityFeedCell4")
    /// Reuse identifier `activityFeedCell5`.
    static let activityFeedCell5: Rswift.ReuseIdentifier<ActivityFeedCell> = Rswift.ReuseIdentifier(identifier: "activityFeedCell5")
    /// Reuse identifier `activityFeedCell6`.
    static let activityFeedCell6: Rswift.ReuseIdentifier<ActivityFeedCell> = Rswift.ReuseIdentifier(identifier: "activityFeedCell6")
    /// Reuse identifier `activityFeedCell7`.
    static let activityFeedCell7: Rswift.ReuseIdentifier<ActivityFeedCell> = Rswift.ReuseIdentifier(identifier: "activityFeedCell7")
    /// Reuse identifier `addActivityFeedCell`.
    static let addActivityFeedCell: Rswift.ReuseIdentifier<ActivityFeedCell> = Rswift.ReuseIdentifier(identifier: "addActivityFeedCell")
    /// Reuse identifier `meetingListTableViewCell`.
    static let meetingListTableViewCell: Rswift.ReuseIdentifier<MeetingListTableViewCell> = Rswift.ReuseIdentifier(identifier: "meetingListTableViewCell")
    /// Reuse identifier `rsvpTableViewCell`.
    static let rsvpTableViewCell: Rswift.ReuseIdentifier<RSVPTableViewCell> = Rswift.ReuseIdentifier(identifier: "rsvpTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 7 view controllers.
  struct segue {
    /// This struct is generated for `EditProfileVC`, and contains static references to 1 segues.
    struct editProfileVC {
      /// Segue identifier `showVerifyPhoneNumberVC`.
      static let showVerifyPhoneNumberVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EditProfileVC, VerifyUpdateCodeVC> = Rswift.StoryboardSegueIdentifier(identifier: "showVerifyPhoneNumberVC")
      
      /// Optionally returns a typed version of segue `showVerifyPhoneNumberVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showVerifyPhoneNumberVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EditProfileVC, VerifyUpdateCodeVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.editProfileVC.showVerifyPhoneNumberVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MessagesGallerySharingVC`, and contains static references to 1 segues.
    struct messagesGallerySharingVC {
      /// Segue identifier `CollectionViewSegue`.
      static let collectionViewSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MessagesGallerySharingVC, MessagesGallerySharingCollectionVC> = Rswift.StoryboardSegueIdentifier(identifier: "CollectionViewSegue")
      
      /// Optionally returns a typed version of segue `CollectionViewSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func collectionViewSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MessagesGallerySharingVC, MessagesGallerySharingCollectionVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.messagesGallerySharingVC.collectionViewSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MessagesLocationSharingVC`, and contains static references to 1 segues.
    struct messagesLocationSharingVC {
      /// Segue identifier `TabBarController`.
      static let tabBarController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MessagesLocationSharingVC, UIKit.UITabBarController> = Rswift.StoryboardSegueIdentifier(identifier: "TabBarController")
      
      /// Optionally returns a typed version of segue `TabBarController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func tabBarController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MessagesLocationSharingVC, UIKit.UITabBarController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.messagesLocationSharingVC.tabBarController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `POIDetailsVC`, and contains static references to 3 segues.
    struct pOIDetailsVC {
      /// Segue identifier `drinkspecials`.
      static let drinkspecials: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, POIDetailsVC, SpecialDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "drinkspecials")
      /// Segue identifier `foodspecials`.
      static let foodspecials: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, POIDetailsVC, SpecialDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "foodspecials")
      /// Segue identifier `moreInfo`.
      static let moreInfo: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, POIDetailsVC, POIMoreInfoViewController> = Rswift.StoryboardSegueIdentifier(identifier: "moreInfo")
      
      /// Optionally returns a typed version of segue `drinkspecials`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func drinkspecials(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, POIDetailsVC, SpecialDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.pOIDetailsVC.drinkspecials, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `foodspecials`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func foodspecials(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, POIDetailsVC, SpecialDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.pOIDetailsVC.foodspecials, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `moreInfo`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func moreInfo(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, POIDetailsVC, POIMoreInfoViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.pOIDetailsVC.moreInfo, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RatePlaceViewController`, and contains static references to 4 segues.
    struct ratePlaceViewController {
      /// Segue identifier `atmosphereSegue`.
      static let atmosphereSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RatePlaceViewController, RateButtonsContainerVC> = Rswift.StoryboardSegueIdentifier(identifier: "atmosphereSegue")
      /// Segue identifier `experienceSegue`.
      static let experienceSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RatePlaceViewController, RateButtonsContainerVC> = Rswift.StoryboardSegueIdentifier(identifier: "experienceSegue")
      /// Segue identifier `foodSegue`.
      static let foodSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RatePlaceViewController, RateButtonsContainerVC> = Rswift.StoryboardSegueIdentifier(identifier: "foodSegue")
      /// Segue identifier `serviceSegue`.
      static let serviceSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RatePlaceViewController, RateButtonsContainerVC> = Rswift.StoryboardSegueIdentifier(identifier: "serviceSegue")
      
      /// Optionally returns a typed version of segue `atmosphereSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func atmosphereSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RatePlaceViewController, RateButtonsContainerVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.ratePlaceViewController.atmosphereSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `experienceSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func experienceSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RatePlaceViewController, RateButtonsContainerVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.ratePlaceViewController.experienceSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `foodSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func foodSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RatePlaceViewController, RateButtonsContainerVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.ratePlaceViewController.foodSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `serviceSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func serviceSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RatePlaceViewController, RateButtonsContainerVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.ratePlaceViewController.serviceSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RateSpecialViewController`, and contains static references to 1 segues.
    struct rateSpecialViewController {
      /// Segue identifier `rate`.
      static let rate: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RateSpecialViewController, RateButtonsContainerVC> = Rswift.StoryboardSegueIdentifier(identifier: "rate")
      
      /// Optionally returns a typed version of segue `rate`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func rate(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RateSpecialViewController, RateButtonsContainerVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.rateSpecialViewController.rate, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SpecialDetailViewController`, and contains static references to 2 segues.
    struct specialDetailViewController {
      /// Segue identifier `photo`.
      static let photo: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SpecialDetailViewController, SpecialPhotoViewController> = Rswift.StoryboardSegueIdentifier(identifier: "photo")
      /// Segue identifier `rate`.
      static let rate: Rswift.StoryboardSegueIdentifier<SegueFromLeft, SpecialDetailViewController, RateSpecialViewController> = Rswift.StoryboardSegueIdentifier(identifier: "rate")
      
      /// Optionally returns a typed version of segue `photo`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func photo(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SpecialDetailViewController, SpecialPhotoViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.specialDetailViewController.photo, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `rate`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func rate(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<SegueFromLeft, SpecialDetailViewController, RateSpecialViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.specialDetailViewController.rate, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 43 storyboards.
  struct storyboard {
    /// Storyboard `ARDrawer`.
    static let aRDrawer = _R.storyboard.aRDrawer()
    /// Storyboard `BookmarksList`.
    static let bookmarksList = _R.storyboard.bookmarksList()
    /// Storyboard `BubblesListVC`.
    static let bubblesListVC = _R.storyboard.bubblesListVC()
    /// Storyboard `CameraCaption`.
    static let cameraCaption = _R.storyboard.cameraCaption()
    /// Storyboard `CameraConfirm`.
    static let cameraConfirm = _R.storyboard.cameraConfirm()
    /// Storyboard `CameraLocation`.
    static let cameraLocation = _R.storyboard.cameraLocation()
    /// Storyboard `Camera`.
    static let camera = _R.storyboard.camera()
    /// Storyboard `CreateMeeting`.
    static let createMeeting = _R.storyboard.createMeeting()
    /// Storyboard `EditProfile`.
    static let editProfile = _R.storyboard.editProfile()
    /// Storyboard `FriendsList`.
    static let friendsList = _R.storyboard.friendsList()
    /// Storyboard `Help`.
    static let help = _R.storyboard.help()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MapNavigation`.
    static let mapNavigation = _R.storyboard.mapNavigation()
    /// Storyboard `MapsBubbles`.
    static let mapsBubbles = _R.storyboard.mapsBubbles()
    /// Storyboard `MapsMarkerInfo`.
    static let mapsMarkerInfo = _R.storyboard.mapsMarkerInfo()
    /// Storyboard `Maps`.
    static let maps = _R.storyboard.maps()
    /// Storyboard `MeetingDate`.
    static let meetingDate = _R.storyboard.meetingDate()
    /// Storyboard `MeetingListCard`.
    static let meetingListCard = _R.storyboard.meetingListCard()
    /// Storyboard `MeetingLocationConfirm`.
    static let meetingLocationConfirm = _R.storyboard.meetingLocationConfirm()
    /// Storyboard `MeetingLocation`.
    static let meetingLocation = _R.storyboard.meetingLocation()
    /// Storyboard `MeetingSummary`.
    static let meetingSummary = _R.storyboard.meetingSummary()
    /// Storyboard `MessagesGallerySharing`.
    static let messagesGallerySharing = _R.storyboard.messagesGallerySharing()
    /// Storyboard `MessagesLocationSharingMap`.
    static let messagesLocationSharingMap = _R.storyboard.messagesLocationSharingMap()
    /// Storyboard `MessagesLocationSharingSearchTable`.
    static let messagesLocationSharingSearchTable = _R.storyboard.messagesLocationSharingSearchTable()
    /// Storyboard `MessagesLocationSharing`.
    static let messagesLocationSharing = _R.storyboard.messagesLocationSharing()
    /// Storyboard `MessagesMediaDetails`.
    static let messagesMediaDetails = _R.storyboard.messagesMediaDetails()
    /// Storyboard `MessagesMediaLocation`.
    static let messagesMediaLocation = _R.storyboard.messagesMediaLocation()
    /// Storyboard `MessagesTable`.
    static let messagesTable = _R.storyboard.messagesTable()
    /// Storyboard `MessagingNewGroup`.
    static let messagingNewGroup = _R.storyboard.messagingNewGroup()
    /// Storyboard `MessagingPollCreation`.
    static let messagingPollCreation = _R.storyboard.messagingPollCreation()
    /// Storyboard `Messaging`.
    static let messaging = _R.storyboard.messaging()
    /// Storyboard `Onboarding`.
    static let onboarding = _R.storyboard.onboarding()
    /// Storyboard `POICard`.
    static let pOICard = _R.storyboard.pOICard()
    /// Storyboard `POIDetails`.
    static let pOIDetails = _R.storyboard.pOIDetails()
    /// Storyboard `POIFillPhoneNumber`.
    static let pOIFillPhoneNumber = _R.storyboard.pOIFillPhoneNumber()
    /// Storyboard `POIFillWebsite`.
    static let pOIFillWebsite = _R.storyboard.pOIFillWebsite()
    /// Storyboard `POILitMeter`.
    static let pOILitMeter = _R.storyboard.pOILitMeter()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `RSVPList`.
    static let rSVPList = _R.storyboard.rSVPList()
    /// Storyboard `RatePlace`.
    static let ratePlace = _R.storyboard.ratePlace()
    /// Storyboard `SearchFilter`.
    static let searchFilter = _R.storyboard.searchFilter()
    /// Storyboard `Search`.
    static let search = _R.storyboard.search()
    /// Storyboard `SettingPage`.
    static let settingPage = _R.storyboard.settingPage()
    
    /// `UIStoryboard(name: "ARDrawer", bundle: ...)`
    static func aRDrawer(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.aRDrawer)
    }
    
    /// `UIStoryboard(name: "BookmarksList", bundle: ...)`
    static func bookmarksList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.bookmarksList)
    }
    
    /// `UIStoryboard(name: "BubblesListVC", bundle: ...)`
    static func bubblesListVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.bubblesListVC)
    }
    
    /// `UIStoryboard(name: "Camera", bundle: ...)`
    static func camera(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.camera)
    }
    
    /// `UIStoryboard(name: "CameraCaption", bundle: ...)`
    static func cameraCaption(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.cameraCaption)
    }
    
    /// `UIStoryboard(name: "CameraConfirm", bundle: ...)`
    static func cameraConfirm(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.cameraConfirm)
    }
    
    /// `UIStoryboard(name: "CameraLocation", bundle: ...)`
    static func cameraLocation(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.cameraLocation)
    }
    
    /// `UIStoryboard(name: "CreateMeeting", bundle: ...)`
    static func createMeeting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.createMeeting)
    }
    
    /// `UIStoryboard(name: "EditProfile", bundle: ...)`
    static func editProfile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.editProfile)
    }
    
    /// `UIStoryboard(name: "FriendsList", bundle: ...)`
    static func friendsList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.friendsList)
    }
    
    /// `UIStoryboard(name: "Help", bundle: ...)`
    static func help(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.help)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MapNavigation", bundle: ...)`
    static func mapNavigation(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mapNavigation)
    }
    
    /// `UIStoryboard(name: "Maps", bundle: ...)`
    static func maps(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.maps)
    }
    
    /// `UIStoryboard(name: "MapsBubbles", bundle: ...)`
    static func mapsBubbles(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mapsBubbles)
    }
    
    /// `UIStoryboard(name: "MapsMarkerInfo", bundle: ...)`
    static func mapsMarkerInfo(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mapsMarkerInfo)
    }
    
    /// `UIStoryboard(name: "MeetingDate", bundle: ...)`
    static func meetingDate(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.meetingDate)
    }
    
    /// `UIStoryboard(name: "MeetingListCard", bundle: ...)`
    static func meetingListCard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.meetingListCard)
    }
    
    /// `UIStoryboard(name: "MeetingLocation", bundle: ...)`
    static func meetingLocation(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.meetingLocation)
    }
    
    /// `UIStoryboard(name: "MeetingLocationConfirm", bundle: ...)`
    static func meetingLocationConfirm(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.meetingLocationConfirm)
    }
    
    /// `UIStoryboard(name: "MeetingSummary", bundle: ...)`
    static func meetingSummary(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.meetingSummary)
    }
    
    /// `UIStoryboard(name: "MessagesGallerySharing", bundle: ...)`
    static func messagesGallerySharing(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.messagesGallerySharing)
    }
    
    /// `UIStoryboard(name: "MessagesLocationSharing", bundle: ...)`
    static func messagesLocationSharing(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.messagesLocationSharing)
    }
    
    /// `UIStoryboard(name: "MessagesLocationSharingMap", bundle: ...)`
    static func messagesLocationSharingMap(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.messagesLocationSharingMap)
    }
    
    /// `UIStoryboard(name: "MessagesLocationSharingSearchTable", bundle: ...)`
    static func messagesLocationSharingSearchTable(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.messagesLocationSharingSearchTable)
    }
    
    /// `UIStoryboard(name: "MessagesMediaDetails", bundle: ...)`
    static func messagesMediaDetails(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.messagesMediaDetails)
    }
    
    /// `UIStoryboard(name: "MessagesMediaLocation", bundle: ...)`
    static func messagesMediaLocation(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.messagesMediaLocation)
    }
    
    /// `UIStoryboard(name: "MessagesTable", bundle: ...)`
    static func messagesTable(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.messagesTable)
    }
    
    /// `UIStoryboard(name: "Messaging", bundle: ...)`
    static func messaging(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.messaging)
    }
    
    /// `UIStoryboard(name: "MessagingNewGroup", bundle: ...)`
    static func messagingNewGroup(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.messagingNewGroup)
    }
    
    /// `UIStoryboard(name: "MessagingPollCreation", bundle: ...)`
    static func messagingPollCreation(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.messagingPollCreation)
    }
    
    /// `UIStoryboard(name: "Onboarding", bundle: ...)`
    static func onboarding(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onboarding)
    }
    
    /// `UIStoryboard(name: "POICard", bundle: ...)`
    static func pOICard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.pOICard)
    }
    
    /// `UIStoryboard(name: "POIDetails", bundle: ...)`
    static func pOIDetails(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.pOIDetails)
    }
    
    /// `UIStoryboard(name: "POIFillPhoneNumber", bundle: ...)`
    static func pOIFillPhoneNumber(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.pOIFillPhoneNumber)
    }
    
    /// `UIStoryboard(name: "POIFillWebsite", bundle: ...)`
    static func pOIFillWebsite(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.pOIFillWebsite)
    }
    
    /// `UIStoryboard(name: "POILitMeter", bundle: ...)`
    static func pOILitMeter(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.pOILitMeter)
    }
    
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    
    /// `UIStoryboard(name: "RSVPList", bundle: ...)`
    static func rSVPList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.rSVPList)
    }
    
    /// `UIStoryboard(name: "RatePlace", bundle: ...)`
    static func ratePlace(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.ratePlace)
    }
    
    /// `UIStoryboard(name: "Search", bundle: ...)`
    static func search(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.search)
    }
    
    /// `UIStoryboard(name: "SearchFilter", bundle: ...)`
    static func searchFilter(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchFilter)
    }
    
    /// `UIStoryboard(name: "SettingPage", bundle: ...)`
    static func settingPage(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settingPage)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 5 localization tables.
  struct string {
    /// This `R.string.login` struct is generated, and contains static references to 2 localization keys.
    struct login {
      /// Value: Email
      static let formEmailFieldPlaceholder = Rswift.StringResource(key: "form.email-field.placeholder", tableName: "Login", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password
      static let formPasswordFieldPlaceholder = Rswift.StringResource(key: "form.password-field.placeholder", tableName: "Login", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Email
      static func formEmailFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("form.email-field.placeholder", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Password
      static func formPasswordFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("form.password-field.placeholder", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.maps` struct is generated, and contains static references to 5 localization keys.
    struct maps {
      /// Value: Chat
      static let mapsChatButtonTitle = Rswift.StringResource(key: "maps.chat-button.title", tableName: "Maps", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: EDIT PROFILE
      static let mapsEditProfileButtonTitle = Rswift.StringResource(key: "maps.edit-profile-button.title", tableName: "Maps", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Turn Off Location Sharing
      static let mapsTurnOffLocationSharingButtonTitle = Rswift.StringResource(key: "maps.turn-off-location-sharing-button.title", tableName: "Maps", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Turn On Location Sharing
      static let mapsTurnOnLocationSharingButtonTitle = Rswift.StringResource(key: "maps.turn-on-location-sharing-button.title", tableName: "Maps", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: VIEW PROFILE
      static let mapsViewProfileButtonTitle = Rswift.StringResource(key: "maps.view-profile-button.title", tableName: "Maps", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Chat
      static func mapsChatButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("maps.chat-button.title", tableName: "Maps", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: EDIT PROFILE
      static func mapsEditProfileButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("maps.edit-profile-button.title", tableName: "Maps", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Turn Off Location Sharing
      static func mapsTurnOffLocationSharingButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("maps.turn-off-location-sharing-button.title", tableName: "Maps", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Turn On Location Sharing
      static func mapsTurnOnLocationSharingButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("maps.turn-on-location-sharing-button.title", tableName: "Maps", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: VIEW PROFILE
      static func mapsViewProfileButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("maps.view-profile-button.title", tableName: "Maps", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.messaging` struct is generated, and contains static references to 1 localization keys.
    struct messaging {
      /// Value: Plan less and live more with streamlined messaging and group chat features.
      static let messagingIntroInformativeTextBackupLabel = Rswift.StringResource(key: "messaging.intro.informative-text.backup-label", tableName: "Messaging", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Plan less and live more with streamlined messaging and group chat features.
      static func messagingIntroInformativeTextBackupLabel(_: Void = ()) -> String {
        return NSLocalizedString("messaging.intro.informative-text.backup-label", tableName: "Messaging", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.onboarding` struct is generated, and contains static references to 2 localization keys.
    struct onboarding {
      /// Value: Log In
      static let onboardingLoginButtonTitle = Rswift.StringResource(key: "onboarding.login-button.title", tableName: "Onboarding", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign Up
      static let onboardingSignupButtonTitle = Rswift.StringResource(key: "onboarding.signup-button.title", tableName: "Onboarding", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Log In
      static func onboardingLoginButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("onboarding.login-button.title", tableName: "Onboarding", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Sign Up
      static func onboardingSignupButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("onboarding.signup-button.title", tableName: "Onboarding", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.signup` struct is generated, and contains static references to 10 localization keys.
    struct signup {
      /// Value: Confirm password
      static let formConfirmPasswordFieldPlaceholder = Rswift.StringResource(key: "form.confirm-password-field.placeholder", tableName: "Signup", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter verification code...
      static let verifyCodeVerificationCodeFieldPlaceholder = Rswift.StringResource(key: "verify-code.verification-code-field.placeholder", tableName: "Signup", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: First name
      static let formFirstNameFieldPlaceholder = Rswift.StringResource(key: "form.first-name-field.placeholder", tableName: "Signup", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Last name
      static let formLastNameFieldPlaceholder = Rswift.StringResource(key: "form.last-name-field.placeholder", tableName: "Signup", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NEXT
      static let formNextButtonTitle = Rswift.StringResource(key: "form.next-button.title", tableName: "Signup", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NEXT
      static let phoneNumberNextButtonTitle = Rswift.StringResource(key: "phone-number.next-button.title", tableName: "Signup", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NEXT
      static let verifyCodeNextButtonTitle = Rswift.StringResource(key: "verify-code.next-button.title", tableName: "Signup", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What password would you like?
      static let formPasswordFieldPlaceholder = Rswift.StringResource(key: "form.password-field.placeholder", tableName: "Signup", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What's your email?
      static let formEmailFieldPlaceholder = Rswift.StringResource(key: "form.email-field.placeholder", tableName: "Signup", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What's your phone number?
      static let phoneNumberPhoneFieldPlaceholder = Rswift.StringResource(key: "phone-number.phone-field.placeholder", tableName: "Signup", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Confirm password
      static func formConfirmPasswordFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("form.confirm-password-field.placeholder", tableName: "Signup", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter verification code...
      static func verifyCodeVerificationCodeFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("verify-code.verification-code-field.placeholder", tableName: "Signup", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: First name
      static func formFirstNameFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("form.first-name-field.placeholder", tableName: "Signup", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Last name
      static func formLastNameFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("form.last-name-field.placeholder", tableName: "Signup", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NEXT
      static func formNextButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("form.next-button.title", tableName: "Signup", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NEXT
      static func phoneNumberNextButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("phone-number.next-button.title", tableName: "Signup", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NEXT
      static func verifyCodeNextButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("verify-code.next-button.title", tableName: "Signup", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: What password would you like?
      static func formPasswordFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("form.password-field.placeholder", tableName: "Signup", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: What's your email?
      static func formEmailFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("form.email-field.placeholder", tableName: "Signup", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: What's your phone number?
      static func phoneNumberPhoneFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("phone-number.phone-field.placeholder", tableName: "Signup", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CommentSectionHeader.validate()
      try _SearchFilterOptionView.validate()
      try _FeedSectionHeader.validate()
      try _SearchBarCell.validate()
      try _MessagesAudioPreviewView.validate()
      try _BubbleMemberCell.validate()
      try _ConfirmBubble.validate()
      try _ProfileSectionHeader.validate()
      try _SignupProfilePicture.validate()
      try _NearbyLocationCell.validate()
      try _MessagesContactCell.validate()
      try _CameraMembers.validate()
      try _MapsMemberMarkerView.validate()
      try _MapsFlag3D.validate()
      try _Login.validate()
      try _MapsBubbleBar.validate()
      try _LandmarkCell.validate()
      try _ProfileInfoCell.validate()
      try _ARMapOther3DMarkerView.validate()
      try _CreateBubble.validate()
      try _MeetingRSVPView.validate()
      try _ImageView.validate()
      try _BubbleListCell.validate()
      try _ProfileActionsCell.validate()
      try _SettingOptionCell.validate()
      try _CheckInCell.validate()
      try _MapsFlag2D.validate()
      try _ARMapPointOfInterest3DMarkerView.validate()
    }
    
    struct _ARFormTextField: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ARFormTextField"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ARMapOther3DMarkerView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ARMapOther3DMarkerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ARMapOther3DMarkerView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ARMapOther3DMarkerView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "MapMarkerBar3D") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MapMarkerBar3D' is used in nib 'ARMapOther3DMarkerView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MapMarkerMoviesShadow3D") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MapMarkerMoviesShadow3D' is used in nib 'ARMapOther3DMarkerView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ARMapPointOfInterest3DMarkerView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ARMapPointOfInterest3DMarkerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "MapMarkerFlameLit") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MapMarkerFlameLit' is used in nib 'ARMapPointOfInterest3DMarkerView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MapMarkerOvalLit") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MapMarkerOvalLit' is used in nib 'ARMapPointOfInterest3DMarkerView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MapMarkerGlassLit") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MapMarkerGlassLit' is used in nib 'ARMapPointOfInterest3DMarkerView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MapsMarkerPOIBackground3D") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MapsMarkerPOIBackground3D' is used in nib 'ARMapPointOfInterest3DMarkerView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AddBubbleMembers: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddBubbleMembers"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AddBubbleMembersVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddBubbleMembersVC
      }
      
      fileprivate init() {}
    }
    
    struct _BubbleListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BubbleListCell
      
      let bundle = R.hostingBundle
      let identifier = "BubbleListCell"
      let name = "BubbleListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BubbleListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BubbleListCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "imageView:scc-Nq-BjA:image") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:scc-Nq-BjA:image' is used in nib 'BubbleListCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _BubbleMemberCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BubbleMemberCell
      
      let bundle = R.hostingBundle
      let identifier = "BubbleMemberCell"
      let name = "BubbleMemberCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BubbleMemberCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BubbleMemberCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "RedXCircle") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RedXCircle' is used in nib 'BubbleMemberCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CheckMarkIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CheckMarkIcon' is used in nib 'BubbleMemberCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CameraMembers: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CameraMembers"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CameraMembersVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CameraMembersVC
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Search' is used in nib 'CameraMembers', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CapsuleView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CapsuleView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _CheckInCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CheckInCell
      
      let bundle = R.hostingBundle
      let identifier = "CheckInCell"
      let name = "CheckInCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CheckInCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CheckInCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "blueArrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blueArrow' is used in nib 'CheckInCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CommentSectionHeader: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CommentSectionHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CommentSectionHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentSectionHeader
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "galleryIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'galleryIcon' is used in nib 'CommentSectionHeader', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cameraIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cameraIcon' is used in nib 'CommentSectionHeader', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fill182") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fill182' is used in nib 'CommentSectionHeader', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ConfirmBubble: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ConfirmBubble"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ConfirmBubbleVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConfirmBubbleVC
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ARButton? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? ARButton
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "EditIconOutlined") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'EditIconOutlined' is used in nib 'ConfirmBubble', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BlueGradientRectangle") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BlueGradientRectangle' is used in nib 'ConfirmBubble', but couldn't be loaded.") }
        if UIKit.UIImage(named: "EditIconFilled") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'EditIconFilled' is used in nib 'ConfirmBubble', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CreateBubble: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CreateBubble"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CreateBubbleVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CreateBubbleVC
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "BlueGradientRectangle") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BlueGradientRectangle' is used in nib 'CreateBubble', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CameraIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CameraIcon' is used in nib 'CreateBubble', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _FeedSectionHeader: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FeedSectionHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FeedSectionHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeedSectionHeader
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "line") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'line' is used in nib 'FeedSectionHeader', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ImageView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ImageView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ImageView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CircularActivityIndicator") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CircularActivityIndicator' is used in nib 'ImageView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _LandmarkCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LandmarkCell
      
      let bundle = R.hostingBundle
      let identifier = "LandmarkCell"
      let name = "LandmarkCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LandmarkCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LandmarkCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "blueArrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blueArrow' is used in nib 'LandmarkCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _Login: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Login"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LoginVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoginVC
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ArrowFullLogo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArrowFullLogo' is used in nib 'Login', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MapsBubbleBar: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MapsBubbleBar"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "DropDownArrowLight") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DropDownArrowLight' is used in nib 'MapsBubbleBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BubblesIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BubblesIcon' is used in nib 'MapsBubbleBar', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MapsFlag2D: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MapsFlag2D"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MapsFlagMarkerView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MapsFlagMarkerView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "MapsFlag2D") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MapsFlag2D' is used in nib 'MapsFlag2D', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MapsFlag3D: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MapsFlag3D"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MapsFlagMarkerView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MapsFlagMarkerView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "MapsFlag3D") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MapsFlag3D' is used in nib 'MapsFlag3D', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MapsMemberMarkerView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MapsMemberMarkerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MapsMemberMarkerView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MapsMemberMarkerView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Cameron") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Cameron' is used in nib 'MapsMemberMarkerView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MeetingRSVPCardView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MeetingRSVPCardView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MeetingRSVPCardView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MeetingRSVPCardView
      }
      
      fileprivate init() {}
    }
    
    struct _MeetingRSVPView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MeetingRSVPView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "BlueArrowLarge") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BlueArrowLarge' is used in nib 'MeetingRSVPView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MessagesAudioPreviewView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MessagesAudioPreviewView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MessagesAudioPreviewView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessagesAudioPreviewView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "deleteMediaIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'deleteMediaIcon' is used in nib 'MessagesAudioPreviewView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "playIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'playIcon' is used in nib 'MessagesAudioPreviewView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "audioBackground") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'audioBackground' is used in nib 'MessagesAudioPreviewView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wave") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wave' is used in nib 'MessagesAudioPreviewView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MessagesContactCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MessagesContactCell
      
      let bundle = R.hostingBundle
      let identifier = "MessagesContactCell"
      let name = "MessagesContactCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MessagesContactCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessagesContactCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "emptyOval") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'emptyOval' is used in nib 'MessagesContactCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MessagingAddContacts: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MessagingAddContacts"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MessagingAddContacts? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessagingAddContacts
      }
      
      fileprivate init() {}
    }
    
    struct _MessagingPollPreview: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MessagingPollPreview"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MessagingPollPreview? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessagingPollPreview
      }
      
      fileprivate init() {}
    }
    
    struct _MessagingPreviewTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MessagingPreviewTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MessagingPreviewTableViewCell"
      let name = "MessagingPreviewTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MessagingPreviewTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessagingPreviewTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NearbyLocationCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NearbyLocationCell
      
      let bundle = R.hostingBundle
      let identifier = "NearbyLocationCell"
      let name = "NearbyLocationCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NearbyLocationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NearbyLocationCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "BookmarksRoundIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BookmarksRoundIcon' is used in nib 'NearbyLocationCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LocationIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LocationIcon' is used in nib 'NearbyLocationCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PhoneNumber: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PhoneNumber"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PhoneNumberVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhoneNumberVC
      }
      
      fileprivate init() {}
    }
    
    struct _PhonePickerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PhonePickerCell
      
      let bundle = R.hostingBundle
      let identifier = "PhonePickerCell"
      let name = "PhonePickerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PhonePickerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhonePickerCell
      }
      
      fileprivate init() {}
    }
    
    struct _PhonePickerPopover: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PhonePickerPopover"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PhonePickerPopoverVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhonePickerPopoverVC
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileActionsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProfileActionsCell
      
      let bundle = R.hostingBundle
      let identifier = "ProfileActionsCell"
      let name = "ProfileActionsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProfileActionsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileActionsCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "BubblesRoundIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BubblesRoundIcon' is used in nib 'ProfileActionsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BookmarksRoundIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BookmarksRoundIcon' is used in nib 'ProfileActionsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "FriendsRoundIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'FriendsRoundIcon' is used in nib 'ProfileActionsCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileInfoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProfileInfoCell
      
      let bundle = R.hostingBundle
      let identifier = "ProfileInfoCell"
      let name = "ProfileInfoCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProfileInfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileInfoCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "GearIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GearIcon' is used in nib 'ProfileInfoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "FireIconFilled") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'FireIconFilled' is used in nib 'ProfileInfoCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileSectionHeader: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProfileSectionHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProfileSectionHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileSectionHeader
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "RightArrowIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RightArrowIcon' is used in nib 'ProfileSectionHeader', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PromoView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PromoView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PromoView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PromoView
      }
      
      fileprivate init() {}
    }
    
    struct _RSVPCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RSVPCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RSVPCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RSVPCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ResetPasswordEmail: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ResetPasswordEmail"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ResetPasswordEmailVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResetPasswordEmailVC
      }
      
      fileprivate init() {}
    }
    
    struct _ResetPasswordNewPass: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ResetPasswordNewPass"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ResetPasswordNewPassVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResetPasswordNewPassVC
      }
      
      fileprivate init() {}
    }
    
    struct _ResetPasswordVerify: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ResetPasswordVerify"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ResetPasswordVerifyVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResetPasswordVerifyVC
      }
      
      fileprivate init() {}
    }
    
    struct _SearchBarCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SearchBarCell
      
      let bundle = R.hostingBundle
      let identifier = "SearchBarCell"
      let name = "SearchBarCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SearchBarCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchBarCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Search' is used in nib 'SearchBarCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SearchCategoriesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchCategoriesCell
      
      let bundle = R.hostingBundle
      let identifier = "SearchCategoriesCell"
      let name = "SearchCategoriesCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SearchCategoriesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchCategoriesCell
      }
      
      fileprivate init() {}
    }
    
    struct _SearchFilterOptionView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchFilterOptionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "SettingOptionDisclose") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SettingOptionDisclose' is used in nib 'SearchFilterOptionView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SearchSectionHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchSectionHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SearchSectionHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchSectionHeader
      }
      
      fileprivate init() {}
    }
    
    struct _SettingOptionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SettingOptionCell
      
      let bundle = R.hostingBundle
      let identifier = "SettingOptionCell"
      let name = "SettingOptionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SettingOptionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingOptionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "SettingOptionDisclose") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SettingOptionDisclose' is used in nib 'SettingOptionCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SignupCongrats: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SignupCongrats"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SignupCongratsVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignupCongratsVC
      }
      
      fileprivate init() {}
    }
    
    struct _SignupForm: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SignupForm"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SignupFormVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignupFormVC
      }
      
      fileprivate init() {}
    }
    
    struct _SignupPermissions: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SignupPermissions"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SignupPermissionsVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignupPermissionsVC
      }
      
      fileprivate init() {}
    }
    
    struct _SignupProfilePicture: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignupProfilePicture"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SignupProfilePictureVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignupProfilePictureVC
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CameraIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CameraIcon' is used in nib 'SignupProfilePicture', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BlueGradientCircle") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BlueGradientCircle' is used in nib 'SignupProfilePicture', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SimpleSectionHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SimpleSectionHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SimpleSectionHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SimpleSectionHeader
      }
      
      fileprivate init() {}
    }
    
    struct _VerifyCode: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VerifyCode"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> VerifyCodeVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VerifyCodeVC
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try editProfile.validate()
      try pOIDetails.validate()
      try search.validate()
      try messagingNewGroup.validate()
      try messagesGallerySharing.validate()
      try ratePlace.validate()
      try pOILitMeter.validate()
      try cameraCaption.validate()
      try onboarding.validate()
      try meetingSummary.validate()
      try mapNavigation.validate()
      try help.validate()
      try searchFilter.validate()
      try pOICard.validate()
      try meetingListCard.validate()
      try createMeeting.validate()
      try friendsList.validate()
      try meetingLocationConfirm.validate()
      try bookmarksList.validate()
      try aRDrawer.validate()
      try pOIFillPhoneNumber.validate()
      try messagesMediaDetails.validate()
      try meetingLocation.validate()
      try messagingPollCreation.validate()
      try messagesLocationSharingMap.validate()
      try cameraLocation.validate()
      try messagesTable.validate()
      try maps.validate()
      try rSVPList.validate()
      try meetingDate.validate()
      try pOIFillWebsite.validate()
      try messagesMediaLocation.validate()
      try cameraConfirm.validate()
      try settingPage.validate()
      try launchScreen.validate()
      try mapsMarkerInfo.validate()
      try messagesLocationSharing.validate()
      try messaging.validate()
      try messagesLocationSharingSearchTable.validate()
      try mapsBubbles.validate()
      try camera.validate()
      try bubblesListVC.validate()
      try profile.validate()
    }
    
    struct aRDrawer: Rswift.StoryboardResourceType, Rswift.Validatable {
      let aRDrawer = StoryboardViewControllerResource<ARDrawer>(identifier: "ARDrawer")
      let bundle = R.hostingBundle
      let name = "ARDrawer"
      
      func aRDrawer(_: Void = ()) -> ARDrawer? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aRDrawer)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "DrawerHandle") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DrawerHandle' is used in storyboard 'ARDrawer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "DrawerTop") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DrawerTop' is used in storyboard 'ARDrawer', but couldn't be loaded.") }
        if _R.storyboard.aRDrawer().aRDrawer() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aRDrawer' could not be loaded from storyboard 'ARDrawer' as 'ARDrawer'.") }
      }
      
      fileprivate init() {}
    }
    
    struct bookmarksList: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bookmarksListVC = StoryboardViewControllerResource<BookmarksListVC>(identifier: "BookmarksListVC")
      let bundle = R.hostingBundle
      let name = "BookmarksList"
      
      func bookmarksListVC(_: Void = ()) -> BookmarksListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bookmarksListVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Search' is used in storyboard 'BookmarksList', but couldn't be loaded.") }
        if _R.storyboard.bookmarksList().bookmarksListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bookmarksListVC' could not be loaded from storyboard 'BookmarksList' as 'BookmarksListVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct bubblesListVC: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bubblesListVC = StoryboardViewControllerResource<BubblesListVC>(identifier: "BubblesListVC")
      let bundle = R.hostingBundle
      let name = "BubblesListVC"
      
      func bubblesListVC(_: Void = ()) -> BubblesListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bubblesListVC)
      }
      
      static func validate() throws {
        if _R.storyboard.bubblesListVC().bubblesListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bubblesListVC' could not be loaded from storyboard 'BubblesListVC' as 'BubblesListVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct camera: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let cameraVC = StoryboardViewControllerResource<CameraVC>(identifier: "CameraVC")
      let name = "Camera"
      
      func cameraVC(_: Void = ()) -> CameraVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cameraVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "FlashAutoIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'FlashAutoIcon' is used in storyboard 'Camera', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SwitchCameraIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SwitchCameraIcon' is used in storyboard 'Camera', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BorderedXCloseIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BorderedXCloseIcon' is used in storyboard 'Camera', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CameraShutterIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CameraShutterIcon' is used in storyboard 'Camera', but couldn't be loaded.") }
        if _R.storyboard.camera().cameraVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cameraVC' could not be loaded from storyboard 'Camera' as 'CameraVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct cameraCaption: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let cameraCaptionVC = StoryboardViewControllerResource<CameraCaptionVC>(identifier: "CameraCaptionVC")
      let name = "CameraCaption"
      
      func cameraCaptionVC(_: Void = ()) -> CameraCaptionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cameraCaptionVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "BorderedXCloseIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BorderedXCloseIcon' is used in storyboard 'CameraCaption', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ForwardArrowIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ForwardArrowIcon' is used in storyboard 'CameraCaption', but couldn't be loaded.") }
        if _R.storyboard.cameraCaption().cameraCaptionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cameraCaptionVC' could not be loaded from storyboard 'CameraCaption' as 'CameraCaptionVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct cameraConfirm: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let cameraConfirmVC = StoryboardViewControllerResource<CameraConfirmVC>(identifier: "CameraConfirmVC")
      let name = "CameraConfirm"
      
      func cameraConfirmVC(_: Void = ()) -> CameraConfirmVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cameraConfirmVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "LocationIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LocationIcon' is used in storyboard 'CameraConfirm', but couldn't be loaded.") }
        if _R.storyboard.cameraConfirm().cameraConfirmVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cameraConfirmVC' could not be loaded from storyboard 'CameraConfirm' as 'CameraConfirmVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct cameraLocation: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let cameraLocationVC = StoryboardViewControllerResource<CameraLocationVC>(identifier: "CameraLocationVC")
      let name = "CameraLocation"
      
      func cameraLocationVC(_: Void = ()) -> CameraLocationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cameraLocationVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "RoundLocationIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RoundLocationIcon' is used in storyboard 'CameraLocation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CurrentLocationIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CurrentLocationIcon' is used in storyboard 'CameraLocation', but couldn't be loaded.") }
        if _R.storyboard.cameraLocation().cameraLocationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cameraLocationVC' could not be loaded from storyboard 'CameraLocation' as 'CameraLocationVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct createMeeting: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let createMeetingVC = StoryboardViewControllerResource<CreateMeetingVC>(identifier: "CreateMeetingVC")
      let name = "CreateMeeting"
      
      func createMeetingVC(_: Void = ()) -> CreateMeetingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createMeetingVC)
      }
      
      static func validate() throws {
        if _R.storyboard.createMeeting().createMeetingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createMeetingVC' could not be loaded from storyboard 'CreateMeeting' as 'CreateMeetingVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct editProfile: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let name = "EditProfile"
      
      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "EditIconFilledLarge") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'EditIconFilledLarge' is used in storyboard 'EditProfile', but couldn't be loaded.") }
        if _R.storyboard.editProfile().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'EditProfile' as 'EditProfileVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct friendsList: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let friendsListVC = StoryboardViewControllerResource<FriendsListVC>(identifier: "FriendsListVC")
      let name = "FriendsList"
      
      func friendsListVC(_: Void = ()) -> FriendsListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: friendsListVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Search' is used in storyboard 'FriendsList', but couldn't be loaded.") }
        if _R.storyboard.friendsList().friendsListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'friendsListVC' could not be loaded from storyboard 'FriendsList' as 'FriendsListVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct help: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let helpVC = StoryboardViewControllerResource<HelpVC>(identifier: "HelpVC")
      let name = "Help"
      
      func helpVC(_: Void = ()) -> HelpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helpVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ExclamationCircularIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ExclamationCircularIcon' is used in storyboard 'Help', but couldn't be loaded.") }
        if _R.storyboard.help().helpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helpVC' could not be loaded from storyboard 'Help' as 'HelpVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "BETAIMAGE") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BETAIMAGE' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ArrowFullLogo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArrowFullLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct mapNavigation: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mapNavigationVC = StoryboardViewControllerResource<MapNavigationVC>(identifier: "MapNavigationVC")
      let name = "MapNavigation"
      
      func mapNavigationVC(_: Void = ()) -> MapNavigationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapNavigationVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icDirectionsTransit") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icDirectionsTransit' is used in storyboard 'MapNavigation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icDirectionsBike") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icDirectionsBike' is used in storyboard 'MapNavigation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backarrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backarrow' is used in storyboard 'MapNavigation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icDirectionsCar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icDirectionsCar' is used in storyboard 'MapNavigation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BlueArrowLarge") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BlueArrowLarge' is used in storyboard 'MapNavigation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "POINavLargeIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'POINavLargeIcon' is used in storyboard 'MapNavigation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icDirectionsWalk") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icDirectionsWalk' is used in storyboard 'MapNavigation', but couldn't be loaded.") }
        if _R.storyboard.mapNavigation().mapNavigationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapNavigationVC' could not be loaded from storyboard 'MapNavigation' as 'MapNavigationVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct maps: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MapsVC
      
      let bundle = R.hostingBundle
      let mapsVC = StoryboardViewControllerResource<MapsVC>(identifier: "MapsVC")
      let name = "Maps"
      
      func mapsVC(_: Void = ()) -> MapsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapsVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "currentLocation") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'currentLocation' is used in storyboard 'Maps', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NewMeetingBackground") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NewMeetingBackground' is used in storyboard 'Maps', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NewMeetingIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NewMeetingIcon' is used in storyboard 'Maps', but couldn't be loaded.") }
        if _R.storyboard.maps().mapsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapsVC' could not be loaded from storyboard 'Maps' as 'MapsVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct mapsBubbles: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mapsBubblesVC = StoryboardViewControllerResource<MapsBubblesVC>(identifier: "MapsBubblesVC")
      let name = "MapsBubbles"
      
      func mapsBubblesVC(_: Void = ()) -> MapsBubblesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapsBubblesVC)
      }
      
      static func validate() throws {
        if _R.storyboard.mapsBubbles().mapsBubblesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapsBubblesVC' could not be loaded from storyboard 'MapsBubbles' as 'MapsBubblesVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct mapsMarkerInfo: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mapsMarkerInfoVC = StoryboardViewControllerResource<MapsMarkerInfoVC>(identifier: "MapsMarkerInfoVC")
      let name = "MapsMarkerInfo"
      
      func mapsMarkerInfoVC(_: Void = ()) -> MapsMarkerInfoVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapsMarkerInfoVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "MapsMarkerInfoMessage") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MapsMarkerInfoMessage' is used in storyboard 'MapsMarkerInfo', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MapsMarkerInfoLocation") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MapsMarkerInfoLocation' is used in storyboard 'MapsMarkerInfo', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MapsMarkerInfoTop") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MapsMarkerInfoTop' is used in storyboard 'MapsMarkerInfo', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MapsMarkerInfoVerticalDivider") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MapsMarkerInfoVerticalDivider' is used in storyboard 'MapsMarkerInfo', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MapsMarkerInfoCallout") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MapsMarkerInfoCallout' is used in storyboard 'MapsMarkerInfo', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MapPopupLocationIndicator") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MapPopupLocationIndicator' is used in storyboard 'MapsMarkerInfo', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MapsMarkerInfoBottom") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MapsMarkerInfoBottom' is used in storyboard 'MapsMarkerInfo', but couldn't be loaded.") }
        if _R.storyboard.mapsMarkerInfo().mapsMarkerInfoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapsMarkerInfoVC' could not be loaded from storyboard 'MapsMarkerInfo' as 'MapsMarkerInfoVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct meetingDate: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let meetingDateVC = StoryboardViewControllerResource<MeetingDateVC>(identifier: "MeetingDateVC")
      let name = "MeetingDate"
      
      func meetingDateVC(_: Void = ()) -> MeetingDateVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: meetingDateVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "LocationIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LocationIcon' is used in storyboard 'MeetingDate', but couldn't be loaded.") }
        if _R.storyboard.meetingDate().meetingDateVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'meetingDateVC' could not be loaded from storyboard 'MeetingDate' as 'MeetingDateVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct meetingListCard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let meetingListCardVC = StoryboardViewControllerResource<MeetingListCardVC>(identifier: "MeetingListCardVC")
      let name = "MeetingListCard"
      
      func meetingListCardVC(_: Void = ()) -> MeetingListCardVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: meetingListCardVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "RightArrowIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RightArrowIcon' is used in storyboard 'MeetingListCard', but couldn't be loaded.") }
        if _R.storyboard.meetingListCard().meetingListCardVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'meetingListCardVC' could not be loaded from storyboard 'MeetingListCard' as 'MeetingListCardVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct meetingLocation: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let meetingLocationVC = StoryboardViewControllerResource<MeetingLocationVC>(identifier: "MeetingLocationVC")
      let name = "MeetingLocation"
      
      func meetingLocationVC(_: Void = ()) -> MeetingLocationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: meetingLocationVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Search' is used in storyboard 'MeetingLocation', but couldn't be loaded.") }
        if _R.storyboard.meetingLocation().meetingLocationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'meetingLocationVC' could not be loaded from storyboard 'MeetingLocation' as 'MeetingLocationVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct meetingLocationConfirm: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let meetingLocationConfirmVC = StoryboardViewControllerResource<MeetingLocationConfirmVC>(identifier: "MeetingLocationConfirmVC")
      let name = "MeetingLocationConfirm"
      
      func meetingLocationConfirmVC(_: Void = ()) -> MeetingLocationConfirmVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: meetingLocationConfirmVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CloseIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CloseIcon' is used in storyboard 'MeetingLocationConfirm', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LocationIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LocationIcon' is used in storyboard 'MeetingLocationConfirm', but couldn't be loaded.") }
        if _R.storyboard.meetingLocationConfirm().meetingLocationConfirmVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'meetingLocationConfirmVC' could not be loaded from storyboard 'MeetingLocationConfirm' as 'MeetingLocationConfirmVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct meetingSummary: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let meetingSummaryVC = StoryboardViewControllerResource<MeetingSummaryVC>(identifier: "MeetingSummaryVC")
      let name = "MeetingSummary"
      
      func meetingSummaryVC(_: Void = ()) -> MeetingSummaryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: meetingSummaryVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "LocationIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LocationIcon' is used in storyboard 'MeetingSummary', but couldn't be loaded.") }
        if _R.storyboard.meetingSummary().meetingSummaryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'meetingSummaryVC' could not be loaded from storyboard 'MeetingSummary' as 'MeetingSummaryVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct messagesGallerySharing: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let messagesGallerySharingVC = StoryboardViewControllerResource<MessagesGallerySharingVC>(identifier: "MessagesGallerySharingVC")
      let name = "MessagesGallerySharing"
      
      func messagesGallerySharingVC(_: Void = ()) -> MessagesGallerySharingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messagesGallerySharingVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "MessagingGallerySharingSelectedBadge") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MessagingGallerySharingSelectedBadge' is used in storyboard 'MessagesGallerySharing', but couldn't be loaded.") }
        if _R.storyboard.messagesGallerySharing().messagesGallerySharingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messagesGallerySharingVC' could not be loaded from storyboard 'MessagesGallerySharing' as 'MessagesGallerySharingVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct messagesLocationSharing: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let messagesLocationSharingVC = StoryboardViewControllerResource<MessagesLocationSharingVC>(identifier: "MessagesLocationSharingVC")
      let name = "MessagesLocationSharing"
      
      func messagesLocationSharingVC(_: Void = ()) -> MessagesLocationSharingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messagesLocationSharingVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Search' is used in storyboard 'MessagesLocationSharing', but couldn't be loaded.") }
        if UIKit.UIImage(named: "appleTouchIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appleTouchIcon' is used in storyboard 'MessagesLocationSharing', but couldn't be loaded.") }
        if _R.storyboard.messagesLocationSharing().messagesLocationSharingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messagesLocationSharingVC' could not be loaded from storyboard 'MessagesLocationSharing' as 'MessagesLocationSharingVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct messagesLocationSharingMap: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let messagesLocationSharingMapVC = StoryboardViewControllerResource<MessagesLocationSharingMapVC>(identifier: "MessagesLocationSharingMapVC")
      let name = "MessagesLocationSharingMap"
      
      func messagesLocationSharingMapVC(_: Void = ()) -> MessagesLocationSharingMapVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messagesLocationSharingMapVC)
      }
      
      static func validate() throws {
        if _R.storyboard.messagesLocationSharingMap().messagesLocationSharingMapVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messagesLocationSharingMapVC' could not be loaded from storyboard 'MessagesLocationSharingMap' as 'MessagesLocationSharingMapVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct messagesLocationSharingSearchTable: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let messagesLocationSharingSearchTableVC = StoryboardViewControllerResource<MessagesLocationSharingSearchTableVC>(identifier: "MessagesLocationSharingSearchTableVC")
      let name = "MessagesLocationSharingSearchTable"
      
      func messagesLocationSharingSearchTableVC(_: Void = ()) -> MessagesLocationSharingSearchTableVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messagesLocationSharingSearchTableVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "LocationIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LocationIcon' is used in storyboard 'MessagesLocationSharingSearchTable', but couldn't be loaded.") }
        if _R.storyboard.messagesLocationSharingSearchTable().messagesLocationSharingSearchTableVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messagesLocationSharingSearchTableVC' could not be loaded from storyboard 'MessagesLocationSharingSearchTable' as 'MessagesLocationSharingSearchTableVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct messagesMediaDetails: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let messagesMediaDetailsVC = StoryboardViewControllerResource<MessagesMediaDetailsVC>(identifier: "MessagesMediaDetailsVC")
      let name = "MessagesMediaDetails"
      
      func messagesMediaDetailsVC(_: Void = ()) -> MessagesMediaDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messagesMediaDetailsVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mediaLocationIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mediaLocationIcon' is used in storyboard 'MessagesMediaDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mediaShareIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mediaShareIcon' is used in storyboard 'MessagesMediaDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mediaCloseIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mediaCloseIcon' is used in storyboard 'MessagesMediaDetails', but couldn't be loaded.") }
        if _R.storyboard.messagesMediaDetails().messagesMediaDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messagesMediaDetailsVC' could not be loaded from storyboard 'MessagesMediaDetails' as 'MessagesMediaDetailsVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct messagesMediaLocation: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let messagesMediaLocationVC = StoryboardViewControllerResource<MessagesMediaLocationVC>(identifier: "MessagesMediaLocationVC")
      let name = "MessagesMediaLocation"
      
      func messagesMediaLocationVC(_: Void = ()) -> MessagesMediaLocationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messagesMediaLocationVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "RoundLocationIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RoundLocationIcon' is used in storyboard 'MessagesMediaLocation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CurrentLocationIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CurrentLocationIcon' is used in storyboard 'MessagesMediaLocation', but couldn't be loaded.") }
        if _R.storyboard.messagesMediaLocation().messagesMediaLocationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messagesMediaLocationVC' could not be loaded from storyboard 'MessagesMediaLocation' as 'MessagesMediaLocationVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct messagesTable: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let messagesTableVC = StoryboardViewControllerResource<MessagesTableVC>(identifier: "MessagesTableVC")
      let name = "MessagesTable"
      
      func messagesTableVC(_: Void = ()) -> MessagesTableVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messagesTableVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "MessagesEmptyHeart") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MessagesEmptyHeart' is used in storyboard 'MessagesTable', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unasweredIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unasweredIcon' is used in storyboard 'MessagesTable', but couldn't be loaded.") }
        if UIKit.UIImage(named: "playIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'playIcon' is used in storyboard 'MessagesTable', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wave") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wave' is used in storyboard 'MessagesTable', but couldn't be loaded.") }
        if UIKit.UIImage(named: "addVideoInfo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addVideoInfo' is used in storyboard 'MessagesTable', but couldn't be loaded.") }
        if UIKit.UIImage(named: "deleteMediaIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'deleteMediaIcon' is used in storyboard 'MessagesTable', but couldn't be loaded.") }
        if UIKit.UIImage(named: "audioBackground") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'audioBackground' is used in storyboard 'MessagesTable', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cameraIconPoll") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cameraIconPoll' is used in storyboard 'MessagesTable', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BlueArrowLarge") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BlueArrowLarge' is used in storyboard 'MessagesTable', but couldn't be loaded.") }
        if UIKit.UIImage(named: "audioRecordBackground") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'audioRecordBackground' is used in storyboard 'MessagesTable', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MessagesSend") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MessagesSend' is used in storyboard 'MessagesTable', but couldn't be loaded.") }
        if _R.storyboard.messagesTable().messagesTableVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messagesTableVC' could not be loaded from storyboard 'MessagesTable' as 'MessagesTableVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct messaging: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let messagingInboxVC = StoryboardViewControllerResource<MessagingInboxVC>(identifier: "MessagingInboxVC")
      let name = "Messaging"
      
      func messagingInboxVC(_: Void = ()) -> MessagingInboxVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messagingInboxVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Search' is used in storyboard 'Messaging', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MessagesBubble") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MessagesBubble' is used in storyboard 'Messaging', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MessagesUnreadIndicator") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MessagesUnreadIndicator' is used in storyboard 'Messaging', but couldn't be loaded.") }
        if _R.storyboard.messaging().messagingInboxVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messagingInboxVC' could not be loaded from storyboard 'Messaging' as 'MessagingInboxVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct messagingNewGroup: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let messagingNewGroupVC = StoryboardViewControllerResource<MessagingNewGroupVC>(identifier: "MessagingNewGroupVC")
      let name = "MessagingNewGroup"
      
      func messagingNewGroupVC(_: Void = ()) -> MessagingNewGroupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messagingNewGroupVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowSmall") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowSmall' is used in storyboard 'MessagingNewGroup', but couldn't be loaded.") }
        if UIKit.UIImage(named: "callIconSmall") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'callIconSmall' is used in storyboard 'MessagingNewGroup', but couldn't be loaded.") }
        if UIKit.UIImage(named: "emptyOval") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'emptyOval' is used in storyboard 'MessagingNewGroup', but couldn't be loaded.") }
        if UIKit.UIImage(named: "deleteContactIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'deleteContactIcon' is used in storyboard 'MessagingNewGroup', but couldn't be loaded.") }
        if _R.storyboard.messagingNewGroup().messagingNewGroupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messagingNewGroupVC' could not be loaded from storyboard 'MessagingNewGroup' as 'MessagingNewGroupVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct messagingPollCreation: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let messagingPollCreationVC = StoryboardViewControllerResource<MessagingPollCreationVC>(identifier: "MessagingPollCreationVC")
      let name = "MessagingPollCreation"
      
      func messagingPollCreationVC(_: Void = ()) -> MessagingPollCreationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messagingPollCreationVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "deletePoll") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'deletePoll' is used in storyboard 'MessagingPollCreation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrowPoll") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowPoll' is used in storyboard 'MessagingPollCreation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cameraIconPoll") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cameraIconPoll' is used in storyboard 'MessagingPollCreation', but couldn't be loaded.") }
        if _R.storyboard.messagingPollCreation().messagingPollCreationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messagingPollCreationVC' could not be loaded from storyboard 'MessagingPollCreation' as 'MessagingPollCreationVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct onboarding: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Onboarding"
      let onboardingVC = StoryboardViewControllerResource<OnboardingVC>(identifier: "OnboardingVC")
      
      func onboardingVC(_: Void = ()) -> OnboardingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingVC)
      }
      
      static func validate() throws {
        if _R.storyboard.onboarding().onboardingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingVC' could not be loaded from storyboard 'Onboarding' as 'OnboardingVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct pOICard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "POICard"
      let pOICardVC = StoryboardViewControllerResource<POICardVC>(identifier: "POICardVC")
      
      func pOICardVC(_: Void = ()) -> POICardVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pOICardVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "blueArrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blueArrow' is used in storyboard 'POICard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "RatingFlameEmpty") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RatingFlameEmpty' is used in storyboard 'POICard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "poilocationIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'poilocationIcon' is used in storyboard 'POICard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:yrg-Re-pN6:image") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:yrg-Re-pN6:image' is used in storyboard 'POICard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "poiWebIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'poiWebIcon' is used in storyboard 'POICard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "callIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'callIcon' is used in storyboard 'POICard', but couldn't be loaded.") }
        if _R.storyboard.pOICard().pOICardVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pOICardVC' could not be loaded from storyboard 'POICard' as 'POICardVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct pOIDetails: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "POIDetails"
      let pOIActivityFeedVC = StoryboardViewControllerResource<POIActivityFeedVC>(identifier: "POIActivityFeedVC")
      let pOIDetailsVC = StoryboardViewControllerResource<POIDetailsVC>(identifier: "POIDetailsVC")
      let rate = StoryboardViewControllerResource<RateSpecialViewController>(identifier: "rate")
      let specialPhotoViewController = StoryboardViewControllerResource<SpecialPhotoViewController>(identifier: "SpecialPhotoViewController")
      
      func pOIActivityFeedVC(_: Void = ()) -> POIActivityFeedVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pOIActivityFeedVC)
      }
      
      func pOIDetailsVC(_: Void = ()) -> POIDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pOIDetailsVC)
      }
      
      func rate(_: Void = ()) -> RateSpecialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rate)
      }
      
      func specialPhotoViewController(_: Void = ()) -> SpecialPhotoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: specialPhotoViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "selected_vote_up") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'selected_vote_up' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SettingOptionDisclose") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SettingOptionDisclose' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BookmarkDisabledRoundIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BookmarkDisabledRoundIcon' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CheckInDisabledRoundIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CheckInDisabledRoundIcon' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "editMenu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'editMenu' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "vote_panel") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'vote_panel' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CircularActivityIndicator") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CircularActivityIndicator' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unselected_vote_down") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unselected_vote_down' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BookmarkRoundIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BookmarkRoundIcon' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fill155") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fill155' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "group8Copy") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'group8Copy' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "RightArrowIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RightArrowIcon' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "RatingFlameEmpty") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RatingFlameEmpty' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Submit Button") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Submit Button' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LocationRoundIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LocationRoundIcon' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "middle_line") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'middle_line' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "path") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'path' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unselect_vote_up") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unselect_vote_up' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CheckInRoundIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CheckInRoundIcon' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "FriendsRoundIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'FriendsRoundIcon' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bar' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PhoneRoundIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PhoneRoundIcon' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BlueArrowLarge") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BlueArrowLarge' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "selected_vote_down") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'selected_vote_down' is used in storyboard 'POIDetails', but couldn't be loaded.") }
        if _R.storyboard.pOIDetails().pOIDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pOIDetailsVC' could not be loaded from storyboard 'POIDetails' as 'POIDetailsVC'.") }
        if _R.storyboard.pOIDetails().specialPhotoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'specialPhotoViewController' could not be loaded from storyboard 'POIDetails' as 'SpecialPhotoViewController'.") }
        if _R.storyboard.pOIDetails().pOIActivityFeedVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pOIActivityFeedVC' could not be loaded from storyboard 'POIDetails' as 'POIActivityFeedVC'.") }
        if _R.storyboard.pOIDetails().rate() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rate' could not be loaded from storyboard 'POIDetails' as 'RateSpecialViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct pOIFillPhoneNumber: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "POIFillPhoneNumber"
      let pOIFillPhoneNumberVC = StoryboardViewControllerResource<POIFillPhoneNumberVC>(identifier: "POIFillPhoneNumberVC")
      
      func pOIFillPhoneNumberVC(_: Void = ()) -> POIFillPhoneNumberVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pOIFillPhoneNumberVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "orangeFlame") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'orangeFlame' is used in storyboard 'POIFillPhoneNumber', but couldn't be loaded.") }
        if _R.storyboard.pOIFillPhoneNumber().pOIFillPhoneNumberVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pOIFillPhoneNumberVC' could not be loaded from storyboard 'POIFillPhoneNumber' as 'POIFillPhoneNumberVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct pOIFillWebsite: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "POIFillWebsite"
      let pOIFillWebsiteVC = StoryboardViewControllerResource<POIFillWebsiteVC>(identifier: "POIFillWebsiteVC")
      
      func pOIFillWebsiteVC(_: Void = ()) -> POIFillWebsiteVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pOIFillWebsiteVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "orangeFlame") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'orangeFlame' is used in storyboard 'POIFillWebsite', but couldn't be loaded.") }
        if _R.storyboard.pOIFillWebsite().pOIFillWebsiteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pOIFillWebsiteVC' could not be loaded from storyboard 'POIFillWebsite' as 'POIFillWebsiteVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct pOILitMeter: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "POILitMeter"
      let pOILitMeterVC = StoryboardViewControllerResource<POILitMeterVC>(identifier: "POILitMeterVC")
      
      func pOILitMeterVC(_: Void = ()) -> POILitMeterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pOILitMeterVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "thumb_up") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'thumb_up' is used in storyboard 'POILitMeter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "thumb_down") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'thumb_down' is used in storyboard 'POILitMeter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lit_up_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lit_up_bg' is used in storyboard 'POILitMeter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close_x") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close_x' is used in storyboard 'POILitMeter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "breakfast") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'breakfast' is used in storyboard 'POILitMeter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lit_down_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lit_down_bg' is used in storyboard 'POILitMeter', but couldn't be loaded.") }
        if _R.storyboard.pOILitMeter().pOILitMeterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pOILitMeterVC' could not be loaded from storyboard 'POILitMeter' as 'POILitMeterVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct profile: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Profile"
      let profileVC = StoryboardViewControllerResource<ProfileVC>(identifier: "ProfileVC")
      
      func profileVC(_: Void = ()) -> ProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileVC)
      }
      
      static func validate() throws {
        if _R.storyboard.profile().profileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileVC' could not be loaded from storyboard 'Profile' as 'ProfileVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct rSVPList: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RSVPList"
      let rsvpTableVC = StoryboardViewControllerResource<RSVPTableViewController>(identifier: "rsvpTableVC")
      
      func rsvpTableVC(_: Void = ()) -> RSVPTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rsvpTableVC)
      }
      
      static func validate() throws {
        if _R.storyboard.rSVPList().rsvpTableVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rsvpTableVC' could not be loaded from storyboard 'RSVPList' as 'RSVPTableViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct ratePlace: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RatePlace"
      let ratePlaceVC = StoryboardViewControllerResource<RatePlaceViewController>(identifier: "ratePlaceVC")
      
      func ratePlaceVC(_: Void = ()) -> RatePlaceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ratePlaceVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "galleryIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'galleryIcon' is used in storyboard 'RatePlace', but couldn't be loaded.") }
        if UIKit.UIImage(named: "RatingFlameEmpty") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RatingFlameEmpty' is used in storyboard 'RatePlace', but couldn't be loaded.") }
        if UIKit.UIImage(named: "DropDownArrowDark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DropDownArrowDark' is used in storyboard 'RatePlace', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cameraIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cameraIcon' is used in storyboard 'RatePlace', but couldn't be loaded.") }
        if _R.storyboard.ratePlace().ratePlaceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ratePlaceVC' could not be loaded from storyboard 'RatePlace' as 'RatePlaceViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct search: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Search"
      let searchVC = StoryboardViewControllerResource<SearchVC>(identifier: "SearchVC")
      
      func searchVC(_: Void = ()) -> SearchVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Search' is used in storyboard 'Search', but couldn't be loaded.") }
        if _R.storyboard.search().searchVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchVC' could not be loaded from storyboard 'Search' as 'SearchVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct searchFilter: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchFilter"
      let searchFilterVC = StoryboardViewControllerResource<SearchFilterVC>(identifier: "SearchFilterVC")
      
      func searchFilterVC(_: Void = ()) -> SearchFilterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchFilterVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "DropDownArrowDark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DropDownArrowDark' is used in storyboard 'SearchFilter', but couldn't be loaded.") }
        if _R.storyboard.searchFilter().searchFilterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchFilterVC' could not be loaded from storyboard 'SearchFilter' as 'SearchFilterVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settingPage: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SettingPage"
      let settingPageVC = StoryboardViewControllerResource<SettingPageVC>(identifier: "SettingPageVC")
      
      func settingPageVC(_: Void = ()) -> SettingPageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingPageVC)
      }
      
      static func validate() throws {
        if _R.storyboard.settingPage().settingPageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingPageVC' could not be loaded from storyboard 'SettingPage' as 'SettingPageVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}